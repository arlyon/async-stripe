/// Refund objects allow you to refund a previously created charge that isn't
/// refunded yet. Funds are refunded to the credit or debit card that's
/// initially charged.
///
/// Related guide: [Refunds](https://stripe.com/docs/refunds)
///
/// For more details see <<https://stripe.com/docs/api/refunds/object>>.
#[derive(Clone, Debug)]
#[cfg_attr(feature = "deserialize", derive(serde::Deserialize))]
pub struct Refund {
    /// Amount, in cents (or local equivalent).
    pub amount: i64,
    /// Balance transaction that describes the impact on your account balance.
    pub balance_transaction: Option<stripe_types::Expandable<stripe_shared::BalanceTransaction>>,
    /// ID of the charge that's refunded.
    pub charge: Option<stripe_types::Expandable<stripe_shared::Charge>>,
    /// Time at which the object was created. Measured in seconds since the Unix epoch.
    pub created: stripe_types::Timestamp,
    /// Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
    /// Must be a [supported currency](https://stripe.com/docs/currencies).
    pub currency: stripe_types::Currency,
    /// An arbitrary string attached to the object.
    /// You can use this for displaying to users (available on non-card refunds only).
    pub description: Option<String>,
    pub destination_details: Option<stripe_shared::RefundDestinationDetails>,
    /// After the refund fails, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.
    pub failure_balance_transaction:
        Option<stripe_types::Expandable<stripe_shared::BalanceTransaction>>,
    /// Provides the reason for the refund failure.
    /// Possible values are: `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request`, or `unknown`.
    pub failure_reason: Option<String>,
    /// Unique identifier for the object.
    pub id: stripe_shared::RefundId,
    /// For payment methods without native refund support (for example, Konbini, PromptPay), provide an email address for the customer to receive refund instructions.
    pub instructions_email: Option<String>,
    /// Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object.
    /// This can be useful for storing additional information about the object in a structured format.
    pub metadata: Option<std::collections::HashMap<String, String>>,
    pub next_action: Option<stripe_shared::RefundNextAction>,
    /// ID of the PaymentIntent that's refunded.
    pub payment_intent: Option<stripe_types::Expandable<stripe_shared::PaymentIntent>>,
    /// Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
    pub reason: Option<RefundReason>,
    /// This is the transaction number that appears on email receipts sent for this refund.
    pub receipt_number: Option<String>,
    /// The transfer reversal that's associated with the refund.
    /// Only present if the charge came from another Stripe account.
    pub source_transfer_reversal: Option<stripe_types::Expandable<stripe_shared::TransferReversal>>,
    /// Status of the refund.
    /// This can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`.
    /// Learn more about [failed refunds](https://stripe.com/docs/refunds#failed-refunds).
    pub status: Option<String>,
    /// This refers to the transfer reversal object if the accompanying transfer reverses.
    /// This is only applicable if the charge was created using the destination parameter.
    pub transfer_reversal: Option<stripe_types::Expandable<stripe_shared::TransferReversal>>,
}
#[doc(hidden)]
pub struct RefundBuilder {
    amount: Option<i64>,
    balance_transaction:
        Option<Option<stripe_types::Expandable<stripe_shared::BalanceTransaction>>>,
    charge: Option<Option<stripe_types::Expandable<stripe_shared::Charge>>>,
    created: Option<stripe_types::Timestamp>,
    currency: Option<stripe_types::Currency>,
    description: Option<Option<String>>,
    destination_details: Option<Option<stripe_shared::RefundDestinationDetails>>,
    failure_balance_transaction:
        Option<Option<stripe_types::Expandable<stripe_shared::BalanceTransaction>>>,
    failure_reason: Option<Option<String>>,
    id: Option<stripe_shared::RefundId>,
    instructions_email: Option<Option<String>>,
    metadata: Option<Option<std::collections::HashMap<String, String>>>,
    next_action: Option<Option<stripe_shared::RefundNextAction>>,
    payment_intent: Option<Option<stripe_types::Expandable<stripe_shared::PaymentIntent>>>,
    reason: Option<Option<RefundReason>>,
    receipt_number: Option<Option<String>>,
    source_transfer_reversal:
        Option<Option<stripe_types::Expandable<stripe_shared::TransferReversal>>>,
    status: Option<Option<String>>,
    transfer_reversal: Option<Option<stripe_types::Expandable<stripe_shared::TransferReversal>>>,
}

#[allow(
    unused_variables,
    irrefutable_let_patterns,
    clippy::let_unit_value,
    clippy::match_single_binding,
    clippy::single_match
)]
const _: () = {
    use miniserde::de::{Map, Visitor};
    use miniserde::json::Value;
    use miniserde::{make_place, Deserialize, Result};
    use stripe_types::miniserde_helpers::FromValueOpt;
    use stripe_types::{MapBuilder, ObjectDeser};

    make_place!(Place);

    impl Deserialize for Refund {
        fn begin(out: &mut Option<Self>) -> &mut dyn Visitor {
            Place::new(out)
        }
    }

    struct Builder<'a> {
        out: &'a mut Option<Refund>,
        builder: RefundBuilder,
    }

    impl Visitor for Place<Refund> {
        fn map(&mut self) -> Result<Box<dyn Map + '_>> {
            Ok(Box::new(Builder { out: &mut self.out, builder: RefundBuilder::deser_default() }))
        }
    }

    impl MapBuilder for RefundBuilder {
        type Out = Refund;
        fn key(&mut self, k: &str) -> Result<&mut dyn Visitor> {
            Ok(match k {
                "amount" => Deserialize::begin(&mut self.amount),
                "balance_transaction" => Deserialize::begin(&mut self.balance_transaction),
                "charge" => Deserialize::begin(&mut self.charge),
                "created" => Deserialize::begin(&mut self.created),
                "currency" => Deserialize::begin(&mut self.currency),
                "description" => Deserialize::begin(&mut self.description),
                "destination_details" => Deserialize::begin(&mut self.destination_details),
                "failure_balance_transaction" => {
                    Deserialize::begin(&mut self.failure_balance_transaction)
                }
                "failure_reason" => Deserialize::begin(&mut self.failure_reason),
                "id" => Deserialize::begin(&mut self.id),
                "instructions_email" => Deserialize::begin(&mut self.instructions_email),
                "metadata" => Deserialize::begin(&mut self.metadata),
                "next_action" => Deserialize::begin(&mut self.next_action),
                "payment_intent" => Deserialize::begin(&mut self.payment_intent),
                "reason" => Deserialize::begin(&mut self.reason),
                "receipt_number" => Deserialize::begin(&mut self.receipt_number),
                "source_transfer_reversal" => {
                    Deserialize::begin(&mut self.source_transfer_reversal)
                }
                "status" => Deserialize::begin(&mut self.status),
                "transfer_reversal" => Deserialize::begin(&mut self.transfer_reversal),

                _ => <dyn Visitor>::ignore(),
            })
        }

        fn deser_default() -> Self {
            Self {
                amount: Deserialize::default(),
                balance_transaction: Deserialize::default(),
                charge: Deserialize::default(),
                created: Deserialize::default(),
                currency: Deserialize::default(),
                description: Deserialize::default(),
                destination_details: Deserialize::default(),
                failure_balance_transaction: Deserialize::default(),
                failure_reason: Deserialize::default(),
                id: Deserialize::default(),
                instructions_email: Deserialize::default(),
                metadata: Deserialize::default(),
                next_action: Deserialize::default(),
                payment_intent: Deserialize::default(),
                reason: Deserialize::default(),
                receipt_number: Deserialize::default(),
                source_transfer_reversal: Deserialize::default(),
                status: Deserialize::default(),
                transfer_reversal: Deserialize::default(),
            }
        }

        fn take_out(&mut self) -> Option<Self::Out> {
            let (
                Some(amount),
                Some(balance_transaction),
                Some(charge),
                Some(created),
                Some(currency),
                Some(description),
                Some(destination_details),
                Some(failure_balance_transaction),
                Some(failure_reason),
                Some(id),
                Some(instructions_email),
                Some(metadata),
                Some(next_action),
                Some(payment_intent),
                Some(reason),
                Some(receipt_number),
                Some(source_transfer_reversal),
                Some(status),
                Some(transfer_reversal),
            ) = (
                self.amount,
                self.balance_transaction.take(),
                self.charge.take(),
                self.created,
                self.currency,
                self.description.take(),
                self.destination_details.take(),
                self.failure_balance_transaction.take(),
                self.failure_reason.take(),
                self.id.take(),
                self.instructions_email.take(),
                self.metadata.take(),
                self.next_action.take(),
                self.payment_intent.take(),
                self.reason,
                self.receipt_number.take(),
                self.source_transfer_reversal.take(),
                self.status.take(),
                self.transfer_reversal.take(),
            )
            else {
                return None;
            };
            Some(Self::Out {
                amount,
                balance_transaction,
                charge,
                created,
                currency,
                description,
                destination_details,
                failure_balance_transaction,
                failure_reason,
                id,
                instructions_email,
                metadata,
                next_action,
                payment_intent,
                reason,
                receipt_number,
                source_transfer_reversal,
                status,
                transfer_reversal,
            })
        }
    }

    impl<'a> Map for Builder<'a> {
        fn key(&mut self, k: &str) -> Result<&mut dyn Visitor> {
            self.builder.key(k)
        }

        fn finish(&mut self) -> Result<()> {
            *self.out = self.builder.take_out();
            Ok(())
        }
    }

    impl ObjectDeser for Refund {
        type Builder = RefundBuilder;
    }

    impl FromValueOpt for Refund {
        fn from_value(v: Value) -> Option<Self> {
            let Value::Object(obj) = v else {
                return None;
            };
            let mut b = RefundBuilder::deser_default();
            for (k, v) in obj {
                match k.as_str() {
                    "amount" => b.amount = FromValueOpt::from_value(v),
                    "balance_transaction" => b.balance_transaction = FromValueOpt::from_value(v),
                    "charge" => b.charge = FromValueOpt::from_value(v),
                    "created" => b.created = FromValueOpt::from_value(v),
                    "currency" => b.currency = FromValueOpt::from_value(v),
                    "description" => b.description = FromValueOpt::from_value(v),
                    "destination_details" => b.destination_details = FromValueOpt::from_value(v),
                    "failure_balance_transaction" => {
                        b.failure_balance_transaction = FromValueOpt::from_value(v)
                    }
                    "failure_reason" => b.failure_reason = FromValueOpt::from_value(v),
                    "id" => b.id = FromValueOpt::from_value(v),
                    "instructions_email" => b.instructions_email = FromValueOpt::from_value(v),
                    "metadata" => b.metadata = FromValueOpt::from_value(v),
                    "next_action" => b.next_action = FromValueOpt::from_value(v),
                    "payment_intent" => b.payment_intent = FromValueOpt::from_value(v),
                    "reason" => b.reason = FromValueOpt::from_value(v),
                    "receipt_number" => b.receipt_number = FromValueOpt::from_value(v),
                    "source_transfer_reversal" => {
                        b.source_transfer_reversal = FromValueOpt::from_value(v)
                    }
                    "status" => b.status = FromValueOpt::from_value(v),
                    "transfer_reversal" => b.transfer_reversal = FromValueOpt::from_value(v),

                    _ => {}
                }
            }
            b.take_out()
        }
    }
};
#[cfg(feature = "serialize")]
impl serde::Serialize for Refund {
    fn serialize<S: serde::Serializer>(&self, s: S) -> Result<S::Ok, S::Error> {
        use serde::ser::SerializeStruct;
        let mut s = s.serialize_struct("Refund", 20)?;
        s.serialize_field("amount", &self.amount)?;
        s.serialize_field("balance_transaction", &self.balance_transaction)?;
        s.serialize_field("charge", &self.charge)?;
        s.serialize_field("created", &self.created)?;
        s.serialize_field("currency", &self.currency)?;
        s.serialize_field("description", &self.description)?;
        s.serialize_field("destination_details", &self.destination_details)?;
        s.serialize_field("failure_balance_transaction", &self.failure_balance_transaction)?;
        s.serialize_field("failure_reason", &self.failure_reason)?;
        s.serialize_field("id", &self.id)?;
        s.serialize_field("instructions_email", &self.instructions_email)?;
        s.serialize_field("metadata", &self.metadata)?;
        s.serialize_field("next_action", &self.next_action)?;
        s.serialize_field("payment_intent", &self.payment_intent)?;
        s.serialize_field("reason", &self.reason)?;
        s.serialize_field("receipt_number", &self.receipt_number)?;
        s.serialize_field("source_transfer_reversal", &self.source_transfer_reversal)?;
        s.serialize_field("status", &self.status)?;
        s.serialize_field("transfer_reversal", &self.transfer_reversal)?;

        s.serialize_field("object", "refund")?;
        s.end()
    }
}
/// Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
#[derive(Copy, Clone, Eq, PartialEq)]
pub enum RefundReason {
    Duplicate,
    ExpiredUncapturedCharge,
    Fraudulent,
    RequestedByCustomer,
}
impl RefundReason {
    pub fn as_str(self) -> &'static str {
        use RefundReason::*;
        match self {
            Duplicate => "duplicate",
            ExpiredUncapturedCharge => "expired_uncaptured_charge",
            Fraudulent => "fraudulent",
            RequestedByCustomer => "requested_by_customer",
        }
    }
}

impl std::str::FromStr for RefundReason {
    type Err = stripe_types::StripeParseError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        use RefundReason::*;
        match s {
            "duplicate" => Ok(Duplicate),
            "expired_uncaptured_charge" => Ok(ExpiredUncapturedCharge),
            "fraudulent" => Ok(Fraudulent),
            "requested_by_customer" => Ok(RequestedByCustomer),
            _ => Err(stripe_types::StripeParseError),
        }
    }
}
impl std::fmt::Display for RefundReason {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str(self.as_str())
    }
}

impl std::fmt::Debug for RefundReason {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str(self.as_str())
    }
}
#[cfg(feature = "serialize")]
impl serde::Serialize for RefundReason {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.as_str())
    }
}
impl miniserde::Deserialize for RefundReason {
    fn begin(out: &mut Option<Self>) -> &mut dyn miniserde::de::Visitor {
        crate::Place::new(out)
    }
}

impl miniserde::de::Visitor for crate::Place<RefundReason> {
    fn string(&mut self, s: &str) -> miniserde::Result<()> {
        use std::str::FromStr;
        self.out = Some(RefundReason::from_str(s).map_err(|_| miniserde::Error)?);
        Ok(())
    }
}

stripe_types::impl_from_val_with_from_str!(RefundReason);
#[cfg(feature = "deserialize")]
impl<'de> serde::Deserialize<'de> for RefundReason {
    fn deserialize<D: serde::Deserializer<'de>>(deserializer: D) -> Result<Self, D::Error> {
        use std::str::FromStr;
        let s: std::borrow::Cow<'de, str> = serde::Deserialize::deserialize(deserializer)?;
        Self::from_str(&s).map_err(|_| serde::de::Error::custom("Unknown value for RefundReason"))
    }
}
impl stripe_types::Object for Refund {
    type Id = stripe_shared::RefundId;
    fn id(&self) -> &Self::Id {
        &self.id
    }

    fn into_id(self) -> Self::Id {
        self.id
    }
}
stripe_types::def_id!(RefundId);
