use stripe_client_core::{
    RequestBuilder, StripeBlockingClient, StripeClient, StripeMethod, StripeRequest,
};

#[derive(Clone, Debug, serde::Serialize)]
struct ListReportingReportRunBuilder {
    #[serde(skip_serializing_if = "Option::is_none")]
    created: Option<stripe_types::RangeQueryTs>,
    #[serde(skip_serializing_if = "Option::is_none")]
    ending_before: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    expand: Option<Vec<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    limit: Option<i64>,
    #[serde(skip_serializing_if = "Option::is_none")]
    starting_after: Option<String>,
}
impl ListReportingReportRunBuilder {
    fn new() -> Self {
        Self { created: None, ending_before: None, expand: None, limit: None, starting_after: None }
    }
}
/// Returns a list of Report Runs, with the most recent appearing first.
#[derive(Clone, Debug, serde::Serialize)]
pub struct ListReportingReportRun {
    inner: ListReportingReportRunBuilder,
}
impl ListReportingReportRun {
    /// Construct a new `ListReportingReportRun`.
    pub fn new() -> Self {
        Self { inner: ListReportingReportRunBuilder::new() }
    }
    /// Only return Report Runs that were created during the given date interval.
    pub fn created(mut self, created: impl Into<stripe_types::RangeQueryTs>) -> Self {
        self.inner.created = Some(created.into());
        self
    }
    /// A cursor for use in pagination.
    /// `ending_before` is an object ID that defines your place in the list.
    /// For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    pub fn ending_before(mut self, ending_before: impl Into<String>) -> Self {
        self.inner.ending_before = Some(ending_before.into());
        self
    }
    /// Specifies which fields in the response should be expanded.
    pub fn expand(mut self, expand: impl Into<Vec<String>>) -> Self {
        self.inner.expand = Some(expand.into());
        self
    }
    /// A limit on the number of objects to be returned.
    /// Limit can range between 1 and 100, and the default is 10.
    pub fn limit(mut self, limit: impl Into<i64>) -> Self {
        self.inner.limit = Some(limit.into());
        self
    }
    /// A cursor for use in pagination.
    /// `starting_after` is an object ID that defines your place in the list.
    /// For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    pub fn starting_after(mut self, starting_after: impl Into<String>) -> Self {
        self.inner.starting_after = Some(starting_after.into());
        self
    }
}
impl Default for ListReportingReportRun {
    fn default() -> Self {
        Self::new()
    }
}
impl ListReportingReportRun {
    /// Send the request and return the deserialized response.
    pub async fn send<C: StripeClient>(
        &self,
        client: &C,
    ) -> Result<<Self as StripeRequest>::Output, C::Err> {
        self.customize().send(client).await
    }

    /// Send the request and return the deserialized response, blocking until completion.
    pub fn send_blocking<C: StripeBlockingClient>(
        &self,
        client: &C,
    ) -> Result<<Self as StripeRequest>::Output, C::Err> {
        self.customize().send_blocking(client)
    }

    pub fn paginate(
        &self,
    ) -> stripe_client_core::ListPaginator<stripe_types::List<stripe_misc::ReportingReportRun>>
    {
        stripe_client_core::ListPaginator::new_list("/reporting/report_runs", &self.inner)
    }
}

impl StripeRequest for ListReportingReportRun {
    type Output = stripe_types::List<stripe_misc::ReportingReportRun>;

    fn build(&self) -> RequestBuilder {
        RequestBuilder::new(StripeMethod::Get, "/reporting/report_runs").query(&self.inner)
    }
}
#[derive(Clone, Debug, serde::Serialize)]
struct RetrieveReportingReportRunBuilder {
    #[serde(skip_serializing_if = "Option::is_none")]
    expand: Option<Vec<String>>,
}
impl RetrieveReportingReportRunBuilder {
    fn new() -> Self {
        Self { expand: None }
    }
}
/// Retrieves the details of an existing Report Run.
#[derive(Clone, Debug, serde::Serialize)]
pub struct RetrieveReportingReportRun {
    inner: RetrieveReportingReportRunBuilder,
    report_run: stripe_misc::ReportingReportRunId,
}
impl RetrieveReportingReportRun {
    /// Construct a new `RetrieveReportingReportRun`.
    pub fn new(report_run: impl Into<stripe_misc::ReportingReportRunId>) -> Self {
        Self { report_run: report_run.into(), inner: RetrieveReportingReportRunBuilder::new() }
    }
    /// Specifies which fields in the response should be expanded.
    pub fn expand(mut self, expand: impl Into<Vec<String>>) -> Self {
        self.inner.expand = Some(expand.into());
        self
    }
}
impl RetrieveReportingReportRun {
    /// Send the request and return the deserialized response.
    pub async fn send<C: StripeClient>(
        &self,
        client: &C,
    ) -> Result<<Self as StripeRequest>::Output, C::Err> {
        self.customize().send(client).await
    }

    /// Send the request and return the deserialized response, blocking until completion.
    pub fn send_blocking<C: StripeBlockingClient>(
        &self,
        client: &C,
    ) -> Result<<Self as StripeRequest>::Output, C::Err> {
        self.customize().send_blocking(client)
    }
}

impl StripeRequest for RetrieveReportingReportRun {
    type Output = stripe_misc::ReportingReportRun;

    fn build(&self) -> RequestBuilder {
        let report_run = &self.report_run;
        RequestBuilder::new(StripeMethod::Get, format!("/reporting/report_runs/{report_run}"))
            .query(&self.inner)
    }
}
#[derive(Clone, Debug, serde::Serialize)]
struct CreateReportingReportRunBuilder {
    #[serde(skip_serializing_if = "Option::is_none")]
    expand: Option<Vec<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    parameters: Option<CreateReportingReportRunParameters>,
    report_type: String,
}
impl CreateReportingReportRunBuilder {
    fn new(report_type: impl Into<String>) -> Self {
        Self { expand: None, parameters: None, report_type: report_type.into() }
    }
}
/// Parameters specifying how the report should be run.
/// Different Report Types have different required and optional parameters, listed in the [API Access to Reports](https://stripe.com/docs/reporting/statements/api) documentation.
#[derive(Clone, Debug, serde::Serialize)]
pub struct CreateReportingReportRunParameters {
    /// The set of report columns to include in the report output.
    /// If omitted, the Report Type is run with its default column set.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub columns: Option<Vec<String>>,
    /// Connected account ID to filter for in the report run.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub connected_account: Option<String>,
    /// Currency of objects to be included in the report run.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub currency: Option<stripe_types::Currency>,
    /// Ending timestamp of data to be included in the report run (exclusive).
    #[serde(skip_serializing_if = "Option::is_none")]
    pub interval_end: Option<stripe_types::Timestamp>,
    /// Starting timestamp of data to be included in the report run.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub interval_start: Option<stripe_types::Timestamp>,
    /// Payout ID by which to filter the report run.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub payout: Option<String>,
    /// Category of balance transactions to be included in the report run.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub reporting_category: Option<CreateReportingReportRunParametersReportingCategory>,
    /// Defaults to `Etc/UTC`.
    /// The output timezone for all timestamps in the report.
    /// A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones).
    /// Has no effect on `interval_start` or `interval_end`.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub timezone: Option<CreateReportingReportRunParametersTimezone>,
}
impl CreateReportingReportRunParameters {
    pub fn new() -> Self {
        Self {
            columns: None,
            connected_account: None,
            currency: None,
            interval_end: None,
            interval_start: None,
            payout: None,
            reporting_category: None,
            timezone: None,
        }
    }
}
impl Default for CreateReportingReportRunParameters {
    fn default() -> Self {
        Self::new()
    }
}
/// Category of balance transactions to be included in the report run.
#[derive(Copy, Clone, Eq, PartialEq)]
#[non_exhaustive]
pub enum CreateReportingReportRunParametersReportingCategory {
    Advance,
    AdvanceFunding,
    AnticipationRepayment,
    Charge,
    ChargeFailure,
    ClimateOrderPurchase,
    ClimateOrderRefund,
    ConnectCollectionTransfer,
    ConnectReservedFunds,
    Contribution,
    Dispute,
    DisputeReversal,
    Fee,
    FinancingPaydown,
    FinancingPaydownReversal,
    FinancingPayout,
    FinancingPayoutReversal,
    IssuingAuthorizationHold,
    IssuingAuthorizationRelease,
    IssuingDispute,
    IssuingTransaction,
    NetworkCost,
    OtherAdjustment,
    PartialCaptureReversal,
    Payout,
    PayoutReversal,
    PlatformEarning,
    PlatformEarningRefund,
    Refund,
    RefundFailure,
    RiskReservedFunds,
    Tax,
    Topup,
    TopupReversal,
    Transfer,
    TransferReversal,
    UnreconciledCustomerFunds,
    /// An unrecognized value from Stripe. Should not be used as a request parameter.
    Unknown,
}
impl CreateReportingReportRunParametersReportingCategory {
    pub fn as_str(self) -> &'static str {
        use CreateReportingReportRunParametersReportingCategory::*;
        match self {
            Advance => "advance",
            AdvanceFunding => "advance_funding",
            AnticipationRepayment => "anticipation_repayment",
            Charge => "charge",
            ChargeFailure => "charge_failure",
            ClimateOrderPurchase => "climate_order_purchase",
            ClimateOrderRefund => "climate_order_refund",
            ConnectCollectionTransfer => "connect_collection_transfer",
            ConnectReservedFunds => "connect_reserved_funds",
            Contribution => "contribution",
            Dispute => "dispute",
            DisputeReversal => "dispute_reversal",
            Fee => "fee",
            FinancingPaydown => "financing_paydown",
            FinancingPaydownReversal => "financing_paydown_reversal",
            FinancingPayout => "financing_payout",
            FinancingPayoutReversal => "financing_payout_reversal",
            IssuingAuthorizationHold => "issuing_authorization_hold",
            IssuingAuthorizationRelease => "issuing_authorization_release",
            IssuingDispute => "issuing_dispute",
            IssuingTransaction => "issuing_transaction",
            NetworkCost => "network_cost",
            OtherAdjustment => "other_adjustment",
            PartialCaptureReversal => "partial_capture_reversal",
            Payout => "payout",
            PayoutReversal => "payout_reversal",
            PlatformEarning => "platform_earning",
            PlatformEarningRefund => "platform_earning_refund",
            Refund => "refund",
            RefundFailure => "refund_failure",
            RiskReservedFunds => "risk_reserved_funds",
            Tax => "tax",
            Topup => "topup",
            TopupReversal => "topup_reversal",
            Transfer => "transfer",
            TransferReversal => "transfer_reversal",
            UnreconciledCustomerFunds => "unreconciled_customer_funds",
            Unknown => "unknown",
        }
    }
}

impl std::str::FromStr for CreateReportingReportRunParametersReportingCategory {
    type Err = std::convert::Infallible;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        use CreateReportingReportRunParametersReportingCategory::*;
        match s {
            "advance" => Ok(Advance),
            "advance_funding" => Ok(AdvanceFunding),
            "anticipation_repayment" => Ok(AnticipationRepayment),
            "charge" => Ok(Charge),
            "charge_failure" => Ok(ChargeFailure),
            "climate_order_purchase" => Ok(ClimateOrderPurchase),
            "climate_order_refund" => Ok(ClimateOrderRefund),
            "connect_collection_transfer" => Ok(ConnectCollectionTransfer),
            "connect_reserved_funds" => Ok(ConnectReservedFunds),
            "contribution" => Ok(Contribution),
            "dispute" => Ok(Dispute),
            "dispute_reversal" => Ok(DisputeReversal),
            "fee" => Ok(Fee),
            "financing_paydown" => Ok(FinancingPaydown),
            "financing_paydown_reversal" => Ok(FinancingPaydownReversal),
            "financing_payout" => Ok(FinancingPayout),
            "financing_payout_reversal" => Ok(FinancingPayoutReversal),
            "issuing_authorization_hold" => Ok(IssuingAuthorizationHold),
            "issuing_authorization_release" => Ok(IssuingAuthorizationRelease),
            "issuing_dispute" => Ok(IssuingDispute),
            "issuing_transaction" => Ok(IssuingTransaction),
            "network_cost" => Ok(NetworkCost),
            "other_adjustment" => Ok(OtherAdjustment),
            "partial_capture_reversal" => Ok(PartialCaptureReversal),
            "payout" => Ok(Payout),
            "payout_reversal" => Ok(PayoutReversal),
            "platform_earning" => Ok(PlatformEarning),
            "platform_earning_refund" => Ok(PlatformEarningRefund),
            "refund" => Ok(Refund),
            "refund_failure" => Ok(RefundFailure),
            "risk_reserved_funds" => Ok(RiskReservedFunds),
            "tax" => Ok(Tax),
            "topup" => Ok(Topup),
            "topup_reversal" => Ok(TopupReversal),
            "transfer" => Ok(Transfer),
            "transfer_reversal" => Ok(TransferReversal),
            "unreconciled_customer_funds" => Ok(UnreconciledCustomerFunds),
            _ => Ok(Self::Unknown),
        }
    }
}
impl std::fmt::Display for CreateReportingReportRunParametersReportingCategory {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str(self.as_str())
    }
}

impl std::fmt::Debug for CreateReportingReportRunParametersReportingCategory {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str(self.as_str())
    }
}
impl serde::Serialize for CreateReportingReportRunParametersReportingCategory {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.as_str())
    }
}
#[cfg(feature = "deserialize")]
impl<'de> serde::Deserialize<'de> for CreateReportingReportRunParametersReportingCategory {
    fn deserialize<D: serde::Deserializer<'de>>(deserializer: D) -> Result<Self, D::Error> {
        use std::str::FromStr;
        let s: std::borrow::Cow<'de, str> = serde::Deserialize::deserialize(deserializer)?;
        Ok(Self::from_str(&s).unwrap())
    }
}
/// Defaults to `Etc/UTC`.
/// The output timezone for all timestamps in the report.
/// A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones).
/// Has no effect on `interval_start` or `interval_end`.
#[derive(Copy, Clone, Eq, PartialEq)]
#[non_exhaustive]
pub enum CreateReportingReportRunParametersTimezone {
    AfricaAbidjan,
    AfricaAccra,
    AfricaAddisAbaba,
    AfricaAlgiers,
    AfricaAsmara,
    AfricaAsmera,
    AfricaBamako,
    AfricaBangui,
    AfricaBanjul,
    AfricaBissau,
    AfricaBlantyre,
    AfricaBrazzaville,
    AfricaBujumbura,
    AfricaCairo,
    AfricaCasablanca,
    AfricaCeuta,
    AfricaConakry,
    AfricaDakar,
    AfricaDarEsSalaam,
    AfricaDjibouti,
    AfricaDouala,
    AfricaElAaiun,
    AfricaFreetown,
    AfricaGaborone,
    AfricaHarare,
    AfricaJohannesburg,
    AfricaJuba,
    AfricaKampala,
    AfricaKhartoum,
    AfricaKigali,
    AfricaKinshasa,
    AfricaLagos,
    AfricaLibreville,
    AfricaLome,
    AfricaLuanda,
    AfricaLubumbashi,
    AfricaLusaka,
    AfricaMalabo,
    AfricaMaputo,
    AfricaMaseru,
    AfricaMbabane,
    AfricaMogadishu,
    AfricaMonrovia,
    AfricaNairobi,
    AfricaNdjamena,
    AfricaNiamey,
    AfricaNouakchott,
    AfricaOuagadougou,
    AfricaPortoMinusNovo,
    AfricaSaoTome,
    AfricaTimbuktu,
    AfricaTripoli,
    AfricaTunis,
    AfricaWindhoek,
    AmericaAdak,
    AmericaAnchorage,
    AmericaAnguilla,
    AmericaAntigua,
    AmericaAraguaina,
    AmericaArgentinaBuenosAires,
    AmericaArgentinaCatamarca,
    AmericaArgentinaComodRivadavia,
    AmericaArgentinaCordoba,
    AmericaArgentinaJujuy,
    AmericaArgentinaLaRioja,
    AmericaArgentinaMendoza,
    AmericaArgentinaRioGallegos,
    AmericaArgentinaSalta,
    AmericaArgentinaSanJuan,
    AmericaArgentinaSanLuis,
    AmericaArgentinaTucuman,
    AmericaArgentinaUshuaia,
    AmericaAruba,
    AmericaAsuncion,
    AmericaAtikokan,
    AmericaAtka,
    AmericaBahia,
    AmericaBahiaBanderas,
    AmericaBarbados,
    AmericaBelem,
    AmericaBelize,
    AmericaBlancMinusSablon,
    AmericaBoaVista,
    AmericaBogota,
    AmericaBoise,
    AmericaBuenosAires,
    AmericaCambridgeBay,
    AmericaCampoGrande,
    AmericaCancun,
    AmericaCaracas,
    AmericaCatamarca,
    AmericaCayenne,
    AmericaCayman,
    AmericaChicago,
    AmericaChihuahua,
    AmericaCiudadJuarez,
    AmericaCoralHarbour,
    AmericaCordoba,
    AmericaCostaRica,
    AmericaCreston,
    AmericaCuiaba,
    AmericaCuracao,
    AmericaDanmarkshavn,
    AmericaDawson,
    AmericaDawsonCreek,
    AmericaDenver,
    AmericaDetroit,
    AmericaDominica,
    AmericaEdmonton,
    AmericaEirunepe,
    AmericaElSalvador,
    AmericaEnsenada,
    AmericaFortNelson,
    AmericaFortWayne,
    AmericaFortaleza,
    AmericaGlaceBay,
    AmericaGodthab,
    AmericaGooseBay,
    AmericaGrandTurk,
    AmericaGrenada,
    AmericaGuadeloupe,
    AmericaGuatemala,
    AmericaGuayaquil,
    AmericaGuyana,
    AmericaHalifax,
    AmericaHavana,
    AmericaHermosillo,
    AmericaIndianaIndianapolis,
    AmericaIndianaKnox,
    AmericaIndianaMarengo,
    AmericaIndianaPetersburg,
    AmericaIndianaTellCity,
    AmericaIndianaVevay,
    AmericaIndianaVincennes,
    AmericaIndianaWinamac,
    AmericaIndianapolis,
    AmericaInuvik,
    AmericaIqaluit,
    AmericaJamaica,
    AmericaJujuy,
    AmericaJuneau,
    AmericaKentuckyLouisville,
    AmericaKentuckyMonticello,
    AmericaKnoxIn,
    AmericaKralendijk,
    AmericaLaPaz,
    AmericaLima,
    AmericaLosAngeles,
    AmericaLouisville,
    AmericaLowerPrinces,
    AmericaMaceio,
    AmericaManagua,
    AmericaManaus,
    AmericaMarigot,
    AmericaMartinique,
    AmericaMatamoros,
    AmericaMazatlan,
    AmericaMendoza,
    AmericaMenominee,
    AmericaMerida,
    AmericaMetlakatla,
    AmericaMexicoCity,
    AmericaMiquelon,
    AmericaMoncton,
    AmericaMonterrey,
    AmericaMontevideo,
    AmericaMontreal,
    AmericaMontserrat,
    AmericaNassau,
    AmericaNewYork,
    AmericaNipigon,
    AmericaNome,
    AmericaNoronha,
    AmericaNorthDakotaBeulah,
    AmericaNorthDakotaCenter,
    AmericaNorthDakotaNewSalem,
    AmericaNuuk,
    AmericaOjinaga,
    AmericaPanama,
    AmericaPangnirtung,
    AmericaParamaribo,
    AmericaPhoenix,
    AmericaPortMinusauMinusPrince,
    AmericaPortOfSpain,
    AmericaPortoAcre,
    AmericaPortoVelho,
    AmericaPuertoRico,
    AmericaPuntaArenas,
    AmericaRainyRiver,
    AmericaRankinInlet,
    AmericaRecife,
    AmericaRegina,
    AmericaResolute,
    AmericaRioBranco,
    AmericaRosario,
    AmericaSantaIsabel,
    AmericaSantarem,
    AmericaSantiago,
    AmericaSantoDomingo,
    AmericaSaoPaulo,
    AmericaScoresbysund,
    AmericaShiprock,
    AmericaSitka,
    AmericaStBarthelemy,
    AmericaStJohns,
    AmericaStKitts,
    AmericaStLucia,
    AmericaStThomas,
    AmericaStVincent,
    AmericaSwiftCurrent,
    AmericaTegucigalpa,
    AmericaThule,
    AmericaThunderBay,
    AmericaTijuana,
    AmericaToronto,
    AmericaTortola,
    AmericaVancouver,
    AmericaVirgin,
    AmericaWhitehorse,
    AmericaWinnipeg,
    AmericaYakutat,
    AmericaYellowknife,
    AntarcticaCasey,
    AntarcticaDavis,
    AntarcticaDumontDUrville,
    AntarcticaMacquarie,
    AntarcticaMawson,
    AntarcticaMcMurdo,
    AntarcticaPalmer,
    AntarcticaRothera,
    AntarcticaSouthPole,
    AntarcticaSyowa,
    AntarcticaTroll,
    AntarcticaVostok,
    ArcticLongyearbyen,
    AsiaAden,
    AsiaAlmaty,
    AsiaAmman,
    AsiaAnadyr,
    AsiaAqtau,
    AsiaAqtobe,
    AsiaAshgabat,
    AsiaAshkhabad,
    AsiaAtyrau,
    AsiaBaghdad,
    AsiaBahrain,
    AsiaBaku,
    AsiaBangkok,
    AsiaBarnaul,
    AsiaBeirut,
    AsiaBishkek,
    AsiaBrunei,
    AsiaCalcutta,
    AsiaChita,
    AsiaChoibalsan,
    AsiaChongqing,
    AsiaChungking,
    AsiaColombo,
    AsiaDacca,
    AsiaDamascus,
    AsiaDhaka,
    AsiaDili,
    AsiaDubai,
    AsiaDushanbe,
    AsiaFamagusta,
    AsiaGaza,
    AsiaHarbin,
    AsiaHebron,
    AsiaHoChiMinh,
    AsiaHongKong,
    AsiaHovd,
    AsiaIrkutsk,
    AsiaIstanbul,
    AsiaJakarta,
    AsiaJayapura,
    AsiaJerusalem,
    AsiaKabul,
    AsiaKamchatka,
    AsiaKarachi,
    AsiaKashgar,
    AsiaKathmandu,
    AsiaKatmandu,
    AsiaKhandyga,
    AsiaKolkata,
    AsiaKrasnoyarsk,
    AsiaKualaLumpur,
    AsiaKuching,
    AsiaKuwait,
    AsiaMacao,
    AsiaMacau,
    AsiaMagadan,
    AsiaMakassar,
    AsiaManila,
    AsiaMuscat,
    AsiaNicosia,
    AsiaNovokuznetsk,
    AsiaNovosibirsk,
    AsiaOmsk,
    AsiaOral,
    AsiaPhnomPenh,
    AsiaPontianak,
    AsiaPyongyang,
    AsiaQatar,
    AsiaQostanay,
    AsiaQyzylorda,
    AsiaRangoon,
    AsiaRiyadh,
    AsiaSaigon,
    AsiaSakhalin,
    AsiaSamarkand,
    AsiaSeoul,
    AsiaShanghai,
    AsiaSingapore,
    AsiaSrednekolymsk,
    AsiaTaipei,
    AsiaTashkent,
    AsiaTbilisi,
    AsiaTehran,
    AsiaTelAviv,
    AsiaThimbu,
    AsiaThimphu,
    AsiaTokyo,
    AsiaTomsk,
    AsiaUjungPandang,
    AsiaUlaanbaatar,
    AsiaUlanBator,
    AsiaUrumqi,
    AsiaUstMinusNera,
    AsiaVientiane,
    AsiaVladivostok,
    AsiaYakutsk,
    AsiaYangon,
    AsiaYekaterinburg,
    AsiaYerevan,
    AtlanticAzores,
    AtlanticBermuda,
    AtlanticCanary,
    AtlanticCapeVerde,
    AtlanticFaeroe,
    AtlanticFaroe,
    AtlanticJanMayen,
    AtlanticMadeira,
    AtlanticReykjavik,
    AtlanticSouthGeorgia,
    AtlanticStHelena,
    AtlanticStanley,
    AustraliaAct,
    AustraliaAdelaide,
    AustraliaBrisbane,
    AustraliaBrokenHill,
    AustraliaCanberra,
    AustraliaCurrie,
    AustraliaDarwin,
    AustraliaEucla,
    AustraliaHobart,
    AustraliaLhi,
    AustraliaLindeman,
    AustraliaLordHowe,
    AustraliaMelbourne,
    AustraliaNsw,
    AustraliaNorth,
    AustraliaPerth,
    AustraliaQueensland,
    AustraliaSouth,
    AustraliaSydney,
    AustraliaTasmania,
    AustraliaVictoria,
    AustraliaWest,
    AustraliaYancowinna,
    BrazilAcre,
    BrazilDeNoronha,
    BrazilEast,
    BrazilWest,
    Cet,
    Cst6cdt,
    CanadaAtlantic,
    CanadaCentral,
    CanadaEastern,
    CanadaMountain,
    CanadaNewfoundland,
    CanadaPacific,
    CanadaSaskatchewan,
    CanadaYukon,
    ChileContinental,
    ChileEasterIsland,
    Cuba,
    Eet,
    Est,
    Est5edt,
    Egypt,
    Eire,
    EtcGmt,
    EtcGmtPlus0,
    EtcGmtPlus1,
    EtcGmtPlus10,
    EtcGmtPlus11,
    EtcGmtPlus12,
    EtcGmtPlus2,
    EtcGmtPlus3,
    EtcGmtPlus4,
    EtcGmtPlus5,
    EtcGmtPlus6,
    EtcGmtPlus7,
    EtcGmtPlus8,
    EtcGmtPlus9,
    EtcGmtMinus0,
    EtcGmtMinus1,
    EtcGmtMinus10,
    EtcGmtMinus11,
    EtcGmtMinus12,
    EtcGmtMinus13,
    EtcGmtMinus14,
    EtcGmtMinus2,
    EtcGmtMinus3,
    EtcGmtMinus4,
    EtcGmtMinus5,
    EtcGmtMinus6,
    EtcGmtMinus7,
    EtcGmtMinus8,
    EtcGmtMinus9,
    EtcGmt0,
    EtcGreenwich,
    EtcUct,
    EtcUtc,
    EtcUniversal,
    EtcZulu,
    EuropeAmsterdam,
    EuropeAndorra,
    EuropeAstrakhan,
    EuropeAthens,
    EuropeBelfast,
    EuropeBelgrade,
    EuropeBerlin,
    EuropeBratislava,
    EuropeBrussels,
    EuropeBucharest,
    EuropeBudapest,
    EuropeBusingen,
    EuropeChisinau,
    EuropeCopenhagen,
    EuropeDublin,
    EuropeGibraltar,
    EuropeGuernsey,
    EuropeHelsinki,
    EuropeIsleOfMan,
    EuropeIstanbul,
    EuropeJersey,
    EuropeKaliningrad,
    EuropeKiev,
    EuropeKirov,
    EuropeKyiv,
    EuropeLisbon,
    EuropeLjubljana,
    EuropeLondon,
    EuropeLuxembourg,
    EuropeMadrid,
    EuropeMalta,
    EuropeMariehamn,
    EuropeMinsk,
    EuropeMonaco,
    EuropeMoscow,
    EuropeNicosia,
    EuropeOslo,
    EuropeParis,
    EuropePodgorica,
    EuropePrague,
    EuropeRiga,
    EuropeRome,
    EuropeSamara,
    EuropeSanMarino,
    EuropeSarajevo,
    EuropeSaratov,
    EuropeSimferopol,
    EuropeSkopje,
    EuropeSofia,
    EuropeStockholm,
    EuropeTallinn,
    EuropeTirane,
    EuropeTiraspol,
    EuropeUlyanovsk,
    EuropeUzhgorod,
    EuropeVaduz,
    EuropeVatican,
    EuropeVienna,
    EuropeVilnius,
    EuropeVolgograd,
    EuropeWarsaw,
    EuropeZagreb,
    EuropeZaporozhye,
    EuropeZurich,
    Factory,
    Gb,
    GbMinusEire,
    Gmt,
    GmtPlus0,
    GmtMinus0,
    Gmt0,
    Greenwich,
    Hst,
    Hongkong,
    Iceland,
    IndianAntananarivo,
    IndianChagos,
    IndianChristmas,
    IndianCocos,
    IndianComoro,
    IndianKerguelen,
    IndianMahe,
    IndianMaldives,
    IndianMauritius,
    IndianMayotte,
    IndianReunion,
    Iran,
    Israel,
    Jamaica,
    Japan,
    Kwajalein,
    Libya,
    Met,
    Mst,
    Mst7mdt,
    MexicoBajaNorte,
    MexicoBajaSur,
    MexicoGeneral,
    Nz,
    NzMinusChat,
    Navajo,
    Prc,
    Pst8pdt,
    PacificApia,
    PacificAuckland,
    PacificBougainville,
    PacificChatham,
    PacificChuuk,
    PacificEaster,
    PacificEfate,
    PacificEnderbury,
    PacificFakaofo,
    PacificFiji,
    PacificFunafuti,
    PacificGalapagos,
    PacificGambier,
    PacificGuadalcanal,
    PacificGuam,
    PacificHonolulu,
    PacificJohnston,
    PacificKanton,
    PacificKiritimati,
    PacificKosrae,
    PacificKwajalein,
    PacificMajuro,
    PacificMarquesas,
    PacificMidway,
    PacificNauru,
    PacificNiue,
    PacificNorfolk,
    PacificNoumea,
    PacificPagoPago,
    PacificPalau,
    PacificPitcairn,
    PacificPohnpei,
    PacificPonape,
    PacificPortMoresby,
    PacificRarotonga,
    PacificSaipan,
    PacificSamoa,
    PacificTahiti,
    PacificTarawa,
    PacificTongatapu,
    PacificTruk,
    PacificWake,
    PacificWallis,
    PacificYap,
    Poland,
    Portugal,
    Roc,
    Rok,
    Singapore,
    Turkey,
    Uct,
    UsAlaska,
    UsAleutian,
    UsArizona,
    UsCentral,
    UsEastMinusIndiana,
    UsEastern,
    UsHawaii,
    UsIndianaMinusStarke,
    UsMichigan,
    UsMountain,
    UsPacific,
    UsPacificMinusNew,
    UsSamoa,
    Utc,
    Universal,
    WMinusSu,
    Wet,
    Zulu,
    /// An unrecognized value from Stripe. Should not be used as a request parameter.
    Unknown,
}
impl CreateReportingReportRunParametersTimezone {
    pub fn as_str(self) -> &'static str {
        use CreateReportingReportRunParametersTimezone::*;
        match self {
            AfricaAbidjan => "Africa/Abidjan",
            AfricaAccra => "Africa/Accra",
            AfricaAddisAbaba => "Africa/Addis_Ababa",
            AfricaAlgiers => "Africa/Algiers",
            AfricaAsmara => "Africa/Asmara",
            AfricaAsmera => "Africa/Asmera",
            AfricaBamako => "Africa/Bamako",
            AfricaBangui => "Africa/Bangui",
            AfricaBanjul => "Africa/Banjul",
            AfricaBissau => "Africa/Bissau",
            AfricaBlantyre => "Africa/Blantyre",
            AfricaBrazzaville => "Africa/Brazzaville",
            AfricaBujumbura => "Africa/Bujumbura",
            AfricaCairo => "Africa/Cairo",
            AfricaCasablanca => "Africa/Casablanca",
            AfricaCeuta => "Africa/Ceuta",
            AfricaConakry => "Africa/Conakry",
            AfricaDakar => "Africa/Dakar",
            AfricaDarEsSalaam => "Africa/Dar_es_Salaam",
            AfricaDjibouti => "Africa/Djibouti",
            AfricaDouala => "Africa/Douala",
            AfricaElAaiun => "Africa/El_Aaiun",
            AfricaFreetown => "Africa/Freetown",
            AfricaGaborone => "Africa/Gaborone",
            AfricaHarare => "Africa/Harare",
            AfricaJohannesburg => "Africa/Johannesburg",
            AfricaJuba => "Africa/Juba",
            AfricaKampala => "Africa/Kampala",
            AfricaKhartoum => "Africa/Khartoum",
            AfricaKigali => "Africa/Kigali",
            AfricaKinshasa => "Africa/Kinshasa",
            AfricaLagos => "Africa/Lagos",
            AfricaLibreville => "Africa/Libreville",
            AfricaLome => "Africa/Lome",
            AfricaLuanda => "Africa/Luanda",
            AfricaLubumbashi => "Africa/Lubumbashi",
            AfricaLusaka => "Africa/Lusaka",
            AfricaMalabo => "Africa/Malabo",
            AfricaMaputo => "Africa/Maputo",
            AfricaMaseru => "Africa/Maseru",
            AfricaMbabane => "Africa/Mbabane",
            AfricaMogadishu => "Africa/Mogadishu",
            AfricaMonrovia => "Africa/Monrovia",
            AfricaNairobi => "Africa/Nairobi",
            AfricaNdjamena => "Africa/Ndjamena",
            AfricaNiamey => "Africa/Niamey",
            AfricaNouakchott => "Africa/Nouakchott",
            AfricaOuagadougou => "Africa/Ouagadougou",
            AfricaPortoMinusNovo => "Africa/Porto-Novo",
            AfricaSaoTome => "Africa/Sao_Tome",
            AfricaTimbuktu => "Africa/Timbuktu",
            AfricaTripoli => "Africa/Tripoli",
            AfricaTunis => "Africa/Tunis",
            AfricaWindhoek => "Africa/Windhoek",
            AmericaAdak => "America/Adak",
            AmericaAnchorage => "America/Anchorage",
            AmericaAnguilla => "America/Anguilla",
            AmericaAntigua => "America/Antigua",
            AmericaAraguaina => "America/Araguaina",
            AmericaArgentinaBuenosAires => "America/Argentina/Buenos_Aires",
            AmericaArgentinaCatamarca => "America/Argentina/Catamarca",
            AmericaArgentinaComodRivadavia => "America/Argentina/ComodRivadavia",
            AmericaArgentinaCordoba => "America/Argentina/Cordoba",
            AmericaArgentinaJujuy => "America/Argentina/Jujuy",
            AmericaArgentinaLaRioja => "America/Argentina/La_Rioja",
            AmericaArgentinaMendoza => "America/Argentina/Mendoza",
            AmericaArgentinaRioGallegos => "America/Argentina/Rio_Gallegos",
            AmericaArgentinaSalta => "America/Argentina/Salta",
            AmericaArgentinaSanJuan => "America/Argentina/San_Juan",
            AmericaArgentinaSanLuis => "America/Argentina/San_Luis",
            AmericaArgentinaTucuman => "America/Argentina/Tucuman",
            AmericaArgentinaUshuaia => "America/Argentina/Ushuaia",
            AmericaAruba => "America/Aruba",
            AmericaAsuncion => "America/Asuncion",
            AmericaAtikokan => "America/Atikokan",
            AmericaAtka => "America/Atka",
            AmericaBahia => "America/Bahia",
            AmericaBahiaBanderas => "America/Bahia_Banderas",
            AmericaBarbados => "America/Barbados",
            AmericaBelem => "America/Belem",
            AmericaBelize => "America/Belize",
            AmericaBlancMinusSablon => "America/Blanc-Sablon",
            AmericaBoaVista => "America/Boa_Vista",
            AmericaBogota => "America/Bogota",
            AmericaBoise => "America/Boise",
            AmericaBuenosAires => "America/Buenos_Aires",
            AmericaCambridgeBay => "America/Cambridge_Bay",
            AmericaCampoGrande => "America/Campo_Grande",
            AmericaCancun => "America/Cancun",
            AmericaCaracas => "America/Caracas",
            AmericaCatamarca => "America/Catamarca",
            AmericaCayenne => "America/Cayenne",
            AmericaCayman => "America/Cayman",
            AmericaChicago => "America/Chicago",
            AmericaChihuahua => "America/Chihuahua",
            AmericaCiudadJuarez => "America/Ciudad_Juarez",
            AmericaCoralHarbour => "America/Coral_Harbour",
            AmericaCordoba => "America/Cordoba",
            AmericaCostaRica => "America/Costa_Rica",
            AmericaCreston => "America/Creston",
            AmericaCuiaba => "America/Cuiaba",
            AmericaCuracao => "America/Curacao",
            AmericaDanmarkshavn => "America/Danmarkshavn",
            AmericaDawson => "America/Dawson",
            AmericaDawsonCreek => "America/Dawson_Creek",
            AmericaDenver => "America/Denver",
            AmericaDetroit => "America/Detroit",
            AmericaDominica => "America/Dominica",
            AmericaEdmonton => "America/Edmonton",
            AmericaEirunepe => "America/Eirunepe",
            AmericaElSalvador => "America/El_Salvador",
            AmericaEnsenada => "America/Ensenada",
            AmericaFortNelson => "America/Fort_Nelson",
            AmericaFortWayne => "America/Fort_Wayne",
            AmericaFortaleza => "America/Fortaleza",
            AmericaGlaceBay => "America/Glace_Bay",
            AmericaGodthab => "America/Godthab",
            AmericaGooseBay => "America/Goose_Bay",
            AmericaGrandTurk => "America/Grand_Turk",
            AmericaGrenada => "America/Grenada",
            AmericaGuadeloupe => "America/Guadeloupe",
            AmericaGuatemala => "America/Guatemala",
            AmericaGuayaquil => "America/Guayaquil",
            AmericaGuyana => "America/Guyana",
            AmericaHalifax => "America/Halifax",
            AmericaHavana => "America/Havana",
            AmericaHermosillo => "America/Hermosillo",
            AmericaIndianaIndianapolis => "America/Indiana/Indianapolis",
            AmericaIndianaKnox => "America/Indiana/Knox",
            AmericaIndianaMarengo => "America/Indiana/Marengo",
            AmericaIndianaPetersburg => "America/Indiana/Petersburg",
            AmericaIndianaTellCity => "America/Indiana/Tell_City",
            AmericaIndianaVevay => "America/Indiana/Vevay",
            AmericaIndianaVincennes => "America/Indiana/Vincennes",
            AmericaIndianaWinamac => "America/Indiana/Winamac",
            AmericaIndianapolis => "America/Indianapolis",
            AmericaInuvik => "America/Inuvik",
            AmericaIqaluit => "America/Iqaluit",
            AmericaJamaica => "America/Jamaica",
            AmericaJujuy => "America/Jujuy",
            AmericaJuneau => "America/Juneau",
            AmericaKentuckyLouisville => "America/Kentucky/Louisville",
            AmericaKentuckyMonticello => "America/Kentucky/Monticello",
            AmericaKnoxIn => "America/Knox_IN",
            AmericaKralendijk => "America/Kralendijk",
            AmericaLaPaz => "America/La_Paz",
            AmericaLima => "America/Lima",
            AmericaLosAngeles => "America/Los_Angeles",
            AmericaLouisville => "America/Louisville",
            AmericaLowerPrinces => "America/Lower_Princes",
            AmericaMaceio => "America/Maceio",
            AmericaManagua => "America/Managua",
            AmericaManaus => "America/Manaus",
            AmericaMarigot => "America/Marigot",
            AmericaMartinique => "America/Martinique",
            AmericaMatamoros => "America/Matamoros",
            AmericaMazatlan => "America/Mazatlan",
            AmericaMendoza => "America/Mendoza",
            AmericaMenominee => "America/Menominee",
            AmericaMerida => "America/Merida",
            AmericaMetlakatla => "America/Metlakatla",
            AmericaMexicoCity => "America/Mexico_City",
            AmericaMiquelon => "America/Miquelon",
            AmericaMoncton => "America/Moncton",
            AmericaMonterrey => "America/Monterrey",
            AmericaMontevideo => "America/Montevideo",
            AmericaMontreal => "America/Montreal",
            AmericaMontserrat => "America/Montserrat",
            AmericaNassau => "America/Nassau",
            AmericaNewYork => "America/New_York",
            AmericaNipigon => "America/Nipigon",
            AmericaNome => "America/Nome",
            AmericaNoronha => "America/Noronha",
            AmericaNorthDakotaBeulah => "America/North_Dakota/Beulah",
            AmericaNorthDakotaCenter => "America/North_Dakota/Center",
            AmericaNorthDakotaNewSalem => "America/North_Dakota/New_Salem",
            AmericaNuuk => "America/Nuuk",
            AmericaOjinaga => "America/Ojinaga",
            AmericaPanama => "America/Panama",
            AmericaPangnirtung => "America/Pangnirtung",
            AmericaParamaribo => "America/Paramaribo",
            AmericaPhoenix => "America/Phoenix",
            AmericaPortMinusauMinusPrince => "America/Port-au-Prince",
            AmericaPortOfSpain => "America/Port_of_Spain",
            AmericaPortoAcre => "America/Porto_Acre",
            AmericaPortoVelho => "America/Porto_Velho",
            AmericaPuertoRico => "America/Puerto_Rico",
            AmericaPuntaArenas => "America/Punta_Arenas",
            AmericaRainyRiver => "America/Rainy_River",
            AmericaRankinInlet => "America/Rankin_Inlet",
            AmericaRecife => "America/Recife",
            AmericaRegina => "America/Regina",
            AmericaResolute => "America/Resolute",
            AmericaRioBranco => "America/Rio_Branco",
            AmericaRosario => "America/Rosario",
            AmericaSantaIsabel => "America/Santa_Isabel",
            AmericaSantarem => "America/Santarem",
            AmericaSantiago => "America/Santiago",
            AmericaSantoDomingo => "America/Santo_Domingo",
            AmericaSaoPaulo => "America/Sao_Paulo",
            AmericaScoresbysund => "America/Scoresbysund",
            AmericaShiprock => "America/Shiprock",
            AmericaSitka => "America/Sitka",
            AmericaStBarthelemy => "America/St_Barthelemy",
            AmericaStJohns => "America/St_Johns",
            AmericaStKitts => "America/St_Kitts",
            AmericaStLucia => "America/St_Lucia",
            AmericaStThomas => "America/St_Thomas",
            AmericaStVincent => "America/St_Vincent",
            AmericaSwiftCurrent => "America/Swift_Current",
            AmericaTegucigalpa => "America/Tegucigalpa",
            AmericaThule => "America/Thule",
            AmericaThunderBay => "America/Thunder_Bay",
            AmericaTijuana => "America/Tijuana",
            AmericaToronto => "America/Toronto",
            AmericaTortola => "America/Tortola",
            AmericaVancouver => "America/Vancouver",
            AmericaVirgin => "America/Virgin",
            AmericaWhitehorse => "America/Whitehorse",
            AmericaWinnipeg => "America/Winnipeg",
            AmericaYakutat => "America/Yakutat",
            AmericaYellowknife => "America/Yellowknife",
            AntarcticaCasey => "Antarctica/Casey",
            AntarcticaDavis => "Antarctica/Davis",
            AntarcticaDumontDUrville => "Antarctica/DumontDUrville",
            AntarcticaMacquarie => "Antarctica/Macquarie",
            AntarcticaMawson => "Antarctica/Mawson",
            AntarcticaMcMurdo => "Antarctica/McMurdo",
            AntarcticaPalmer => "Antarctica/Palmer",
            AntarcticaRothera => "Antarctica/Rothera",
            AntarcticaSouthPole => "Antarctica/South_Pole",
            AntarcticaSyowa => "Antarctica/Syowa",
            AntarcticaTroll => "Antarctica/Troll",
            AntarcticaVostok => "Antarctica/Vostok",
            ArcticLongyearbyen => "Arctic/Longyearbyen",
            AsiaAden => "Asia/Aden",
            AsiaAlmaty => "Asia/Almaty",
            AsiaAmman => "Asia/Amman",
            AsiaAnadyr => "Asia/Anadyr",
            AsiaAqtau => "Asia/Aqtau",
            AsiaAqtobe => "Asia/Aqtobe",
            AsiaAshgabat => "Asia/Ashgabat",
            AsiaAshkhabad => "Asia/Ashkhabad",
            AsiaAtyrau => "Asia/Atyrau",
            AsiaBaghdad => "Asia/Baghdad",
            AsiaBahrain => "Asia/Bahrain",
            AsiaBaku => "Asia/Baku",
            AsiaBangkok => "Asia/Bangkok",
            AsiaBarnaul => "Asia/Barnaul",
            AsiaBeirut => "Asia/Beirut",
            AsiaBishkek => "Asia/Bishkek",
            AsiaBrunei => "Asia/Brunei",
            AsiaCalcutta => "Asia/Calcutta",
            AsiaChita => "Asia/Chita",
            AsiaChoibalsan => "Asia/Choibalsan",
            AsiaChongqing => "Asia/Chongqing",
            AsiaChungking => "Asia/Chungking",
            AsiaColombo => "Asia/Colombo",
            AsiaDacca => "Asia/Dacca",
            AsiaDamascus => "Asia/Damascus",
            AsiaDhaka => "Asia/Dhaka",
            AsiaDili => "Asia/Dili",
            AsiaDubai => "Asia/Dubai",
            AsiaDushanbe => "Asia/Dushanbe",
            AsiaFamagusta => "Asia/Famagusta",
            AsiaGaza => "Asia/Gaza",
            AsiaHarbin => "Asia/Harbin",
            AsiaHebron => "Asia/Hebron",
            AsiaHoChiMinh => "Asia/Ho_Chi_Minh",
            AsiaHongKong => "Asia/Hong_Kong",
            AsiaHovd => "Asia/Hovd",
            AsiaIrkutsk => "Asia/Irkutsk",
            AsiaIstanbul => "Asia/Istanbul",
            AsiaJakarta => "Asia/Jakarta",
            AsiaJayapura => "Asia/Jayapura",
            AsiaJerusalem => "Asia/Jerusalem",
            AsiaKabul => "Asia/Kabul",
            AsiaKamchatka => "Asia/Kamchatka",
            AsiaKarachi => "Asia/Karachi",
            AsiaKashgar => "Asia/Kashgar",
            AsiaKathmandu => "Asia/Kathmandu",
            AsiaKatmandu => "Asia/Katmandu",
            AsiaKhandyga => "Asia/Khandyga",
            AsiaKolkata => "Asia/Kolkata",
            AsiaKrasnoyarsk => "Asia/Krasnoyarsk",
            AsiaKualaLumpur => "Asia/Kuala_Lumpur",
            AsiaKuching => "Asia/Kuching",
            AsiaKuwait => "Asia/Kuwait",
            AsiaMacao => "Asia/Macao",
            AsiaMacau => "Asia/Macau",
            AsiaMagadan => "Asia/Magadan",
            AsiaMakassar => "Asia/Makassar",
            AsiaManila => "Asia/Manila",
            AsiaMuscat => "Asia/Muscat",
            AsiaNicosia => "Asia/Nicosia",
            AsiaNovokuznetsk => "Asia/Novokuznetsk",
            AsiaNovosibirsk => "Asia/Novosibirsk",
            AsiaOmsk => "Asia/Omsk",
            AsiaOral => "Asia/Oral",
            AsiaPhnomPenh => "Asia/Phnom_Penh",
            AsiaPontianak => "Asia/Pontianak",
            AsiaPyongyang => "Asia/Pyongyang",
            AsiaQatar => "Asia/Qatar",
            AsiaQostanay => "Asia/Qostanay",
            AsiaQyzylorda => "Asia/Qyzylorda",
            AsiaRangoon => "Asia/Rangoon",
            AsiaRiyadh => "Asia/Riyadh",
            AsiaSaigon => "Asia/Saigon",
            AsiaSakhalin => "Asia/Sakhalin",
            AsiaSamarkand => "Asia/Samarkand",
            AsiaSeoul => "Asia/Seoul",
            AsiaShanghai => "Asia/Shanghai",
            AsiaSingapore => "Asia/Singapore",
            AsiaSrednekolymsk => "Asia/Srednekolymsk",
            AsiaTaipei => "Asia/Taipei",
            AsiaTashkent => "Asia/Tashkent",
            AsiaTbilisi => "Asia/Tbilisi",
            AsiaTehran => "Asia/Tehran",
            AsiaTelAviv => "Asia/Tel_Aviv",
            AsiaThimbu => "Asia/Thimbu",
            AsiaThimphu => "Asia/Thimphu",
            AsiaTokyo => "Asia/Tokyo",
            AsiaTomsk => "Asia/Tomsk",
            AsiaUjungPandang => "Asia/Ujung_Pandang",
            AsiaUlaanbaatar => "Asia/Ulaanbaatar",
            AsiaUlanBator => "Asia/Ulan_Bator",
            AsiaUrumqi => "Asia/Urumqi",
            AsiaUstMinusNera => "Asia/Ust-Nera",
            AsiaVientiane => "Asia/Vientiane",
            AsiaVladivostok => "Asia/Vladivostok",
            AsiaYakutsk => "Asia/Yakutsk",
            AsiaYangon => "Asia/Yangon",
            AsiaYekaterinburg => "Asia/Yekaterinburg",
            AsiaYerevan => "Asia/Yerevan",
            AtlanticAzores => "Atlantic/Azores",
            AtlanticBermuda => "Atlantic/Bermuda",
            AtlanticCanary => "Atlantic/Canary",
            AtlanticCapeVerde => "Atlantic/Cape_Verde",
            AtlanticFaeroe => "Atlantic/Faeroe",
            AtlanticFaroe => "Atlantic/Faroe",
            AtlanticJanMayen => "Atlantic/Jan_Mayen",
            AtlanticMadeira => "Atlantic/Madeira",
            AtlanticReykjavik => "Atlantic/Reykjavik",
            AtlanticSouthGeorgia => "Atlantic/South_Georgia",
            AtlanticStHelena => "Atlantic/St_Helena",
            AtlanticStanley => "Atlantic/Stanley",
            AustraliaAct => "Australia/ACT",
            AustraliaAdelaide => "Australia/Adelaide",
            AustraliaBrisbane => "Australia/Brisbane",
            AustraliaBrokenHill => "Australia/Broken_Hill",
            AustraliaCanberra => "Australia/Canberra",
            AustraliaCurrie => "Australia/Currie",
            AustraliaDarwin => "Australia/Darwin",
            AustraliaEucla => "Australia/Eucla",
            AustraliaHobart => "Australia/Hobart",
            AustraliaLhi => "Australia/LHI",
            AustraliaLindeman => "Australia/Lindeman",
            AustraliaLordHowe => "Australia/Lord_Howe",
            AustraliaMelbourne => "Australia/Melbourne",
            AustraliaNsw => "Australia/NSW",
            AustraliaNorth => "Australia/North",
            AustraliaPerth => "Australia/Perth",
            AustraliaQueensland => "Australia/Queensland",
            AustraliaSouth => "Australia/South",
            AustraliaSydney => "Australia/Sydney",
            AustraliaTasmania => "Australia/Tasmania",
            AustraliaVictoria => "Australia/Victoria",
            AustraliaWest => "Australia/West",
            AustraliaYancowinna => "Australia/Yancowinna",
            BrazilAcre => "Brazil/Acre",
            BrazilDeNoronha => "Brazil/DeNoronha",
            BrazilEast => "Brazil/East",
            BrazilWest => "Brazil/West",
            Cet => "CET",
            Cst6cdt => "CST6CDT",
            CanadaAtlantic => "Canada/Atlantic",
            CanadaCentral => "Canada/Central",
            CanadaEastern => "Canada/Eastern",
            CanadaMountain => "Canada/Mountain",
            CanadaNewfoundland => "Canada/Newfoundland",
            CanadaPacific => "Canada/Pacific",
            CanadaSaskatchewan => "Canada/Saskatchewan",
            CanadaYukon => "Canada/Yukon",
            ChileContinental => "Chile/Continental",
            ChileEasterIsland => "Chile/EasterIsland",
            Cuba => "Cuba",
            Eet => "EET",
            Est => "EST",
            Est5edt => "EST5EDT",
            Egypt => "Egypt",
            Eire => "Eire",
            EtcGmt => "Etc/GMT",
            EtcGmtPlus0 => "Etc/GMT+0",
            EtcGmtPlus1 => "Etc/GMT+1",
            EtcGmtPlus10 => "Etc/GMT+10",
            EtcGmtPlus11 => "Etc/GMT+11",
            EtcGmtPlus12 => "Etc/GMT+12",
            EtcGmtPlus2 => "Etc/GMT+2",
            EtcGmtPlus3 => "Etc/GMT+3",
            EtcGmtPlus4 => "Etc/GMT+4",
            EtcGmtPlus5 => "Etc/GMT+5",
            EtcGmtPlus6 => "Etc/GMT+6",
            EtcGmtPlus7 => "Etc/GMT+7",
            EtcGmtPlus8 => "Etc/GMT+8",
            EtcGmtPlus9 => "Etc/GMT+9",
            EtcGmtMinus0 => "Etc/GMT-0",
            EtcGmtMinus1 => "Etc/GMT-1",
            EtcGmtMinus10 => "Etc/GMT-10",
            EtcGmtMinus11 => "Etc/GMT-11",
            EtcGmtMinus12 => "Etc/GMT-12",
            EtcGmtMinus13 => "Etc/GMT-13",
            EtcGmtMinus14 => "Etc/GMT-14",
            EtcGmtMinus2 => "Etc/GMT-2",
            EtcGmtMinus3 => "Etc/GMT-3",
            EtcGmtMinus4 => "Etc/GMT-4",
            EtcGmtMinus5 => "Etc/GMT-5",
            EtcGmtMinus6 => "Etc/GMT-6",
            EtcGmtMinus7 => "Etc/GMT-7",
            EtcGmtMinus8 => "Etc/GMT-8",
            EtcGmtMinus9 => "Etc/GMT-9",
            EtcGmt0 => "Etc/GMT0",
            EtcGreenwich => "Etc/Greenwich",
            EtcUct => "Etc/UCT",
            EtcUtc => "Etc/UTC",
            EtcUniversal => "Etc/Universal",
            EtcZulu => "Etc/Zulu",
            EuropeAmsterdam => "Europe/Amsterdam",
            EuropeAndorra => "Europe/Andorra",
            EuropeAstrakhan => "Europe/Astrakhan",
            EuropeAthens => "Europe/Athens",
            EuropeBelfast => "Europe/Belfast",
            EuropeBelgrade => "Europe/Belgrade",
            EuropeBerlin => "Europe/Berlin",
            EuropeBratislava => "Europe/Bratislava",
            EuropeBrussels => "Europe/Brussels",
            EuropeBucharest => "Europe/Bucharest",
            EuropeBudapest => "Europe/Budapest",
            EuropeBusingen => "Europe/Busingen",
            EuropeChisinau => "Europe/Chisinau",
            EuropeCopenhagen => "Europe/Copenhagen",
            EuropeDublin => "Europe/Dublin",
            EuropeGibraltar => "Europe/Gibraltar",
            EuropeGuernsey => "Europe/Guernsey",
            EuropeHelsinki => "Europe/Helsinki",
            EuropeIsleOfMan => "Europe/Isle_of_Man",
            EuropeIstanbul => "Europe/Istanbul",
            EuropeJersey => "Europe/Jersey",
            EuropeKaliningrad => "Europe/Kaliningrad",
            EuropeKiev => "Europe/Kiev",
            EuropeKirov => "Europe/Kirov",
            EuropeKyiv => "Europe/Kyiv",
            EuropeLisbon => "Europe/Lisbon",
            EuropeLjubljana => "Europe/Ljubljana",
            EuropeLondon => "Europe/London",
            EuropeLuxembourg => "Europe/Luxembourg",
            EuropeMadrid => "Europe/Madrid",
            EuropeMalta => "Europe/Malta",
            EuropeMariehamn => "Europe/Mariehamn",
            EuropeMinsk => "Europe/Minsk",
            EuropeMonaco => "Europe/Monaco",
            EuropeMoscow => "Europe/Moscow",
            EuropeNicosia => "Europe/Nicosia",
            EuropeOslo => "Europe/Oslo",
            EuropeParis => "Europe/Paris",
            EuropePodgorica => "Europe/Podgorica",
            EuropePrague => "Europe/Prague",
            EuropeRiga => "Europe/Riga",
            EuropeRome => "Europe/Rome",
            EuropeSamara => "Europe/Samara",
            EuropeSanMarino => "Europe/San_Marino",
            EuropeSarajevo => "Europe/Sarajevo",
            EuropeSaratov => "Europe/Saratov",
            EuropeSimferopol => "Europe/Simferopol",
            EuropeSkopje => "Europe/Skopje",
            EuropeSofia => "Europe/Sofia",
            EuropeStockholm => "Europe/Stockholm",
            EuropeTallinn => "Europe/Tallinn",
            EuropeTirane => "Europe/Tirane",
            EuropeTiraspol => "Europe/Tiraspol",
            EuropeUlyanovsk => "Europe/Ulyanovsk",
            EuropeUzhgorod => "Europe/Uzhgorod",
            EuropeVaduz => "Europe/Vaduz",
            EuropeVatican => "Europe/Vatican",
            EuropeVienna => "Europe/Vienna",
            EuropeVilnius => "Europe/Vilnius",
            EuropeVolgograd => "Europe/Volgograd",
            EuropeWarsaw => "Europe/Warsaw",
            EuropeZagreb => "Europe/Zagreb",
            EuropeZaporozhye => "Europe/Zaporozhye",
            EuropeZurich => "Europe/Zurich",
            Factory => "Factory",
            Gb => "GB",
            GbMinusEire => "GB-Eire",
            Gmt => "GMT",
            GmtPlus0 => "GMT+0",
            GmtMinus0 => "GMT-0",
            Gmt0 => "GMT0",
            Greenwich => "Greenwich",
            Hst => "HST",
            Hongkong => "Hongkong",
            Iceland => "Iceland",
            IndianAntananarivo => "Indian/Antananarivo",
            IndianChagos => "Indian/Chagos",
            IndianChristmas => "Indian/Christmas",
            IndianCocos => "Indian/Cocos",
            IndianComoro => "Indian/Comoro",
            IndianKerguelen => "Indian/Kerguelen",
            IndianMahe => "Indian/Mahe",
            IndianMaldives => "Indian/Maldives",
            IndianMauritius => "Indian/Mauritius",
            IndianMayotte => "Indian/Mayotte",
            IndianReunion => "Indian/Reunion",
            Iran => "Iran",
            Israel => "Israel",
            Jamaica => "Jamaica",
            Japan => "Japan",
            Kwajalein => "Kwajalein",
            Libya => "Libya",
            Met => "MET",
            Mst => "MST",
            Mst7mdt => "MST7MDT",
            MexicoBajaNorte => "Mexico/BajaNorte",
            MexicoBajaSur => "Mexico/BajaSur",
            MexicoGeneral => "Mexico/General",
            Nz => "NZ",
            NzMinusChat => "NZ-CHAT",
            Navajo => "Navajo",
            Prc => "PRC",
            Pst8pdt => "PST8PDT",
            PacificApia => "Pacific/Apia",
            PacificAuckland => "Pacific/Auckland",
            PacificBougainville => "Pacific/Bougainville",
            PacificChatham => "Pacific/Chatham",
            PacificChuuk => "Pacific/Chuuk",
            PacificEaster => "Pacific/Easter",
            PacificEfate => "Pacific/Efate",
            PacificEnderbury => "Pacific/Enderbury",
            PacificFakaofo => "Pacific/Fakaofo",
            PacificFiji => "Pacific/Fiji",
            PacificFunafuti => "Pacific/Funafuti",
            PacificGalapagos => "Pacific/Galapagos",
            PacificGambier => "Pacific/Gambier",
            PacificGuadalcanal => "Pacific/Guadalcanal",
            PacificGuam => "Pacific/Guam",
            PacificHonolulu => "Pacific/Honolulu",
            PacificJohnston => "Pacific/Johnston",
            PacificKanton => "Pacific/Kanton",
            PacificKiritimati => "Pacific/Kiritimati",
            PacificKosrae => "Pacific/Kosrae",
            PacificKwajalein => "Pacific/Kwajalein",
            PacificMajuro => "Pacific/Majuro",
            PacificMarquesas => "Pacific/Marquesas",
            PacificMidway => "Pacific/Midway",
            PacificNauru => "Pacific/Nauru",
            PacificNiue => "Pacific/Niue",
            PacificNorfolk => "Pacific/Norfolk",
            PacificNoumea => "Pacific/Noumea",
            PacificPagoPago => "Pacific/Pago_Pago",
            PacificPalau => "Pacific/Palau",
            PacificPitcairn => "Pacific/Pitcairn",
            PacificPohnpei => "Pacific/Pohnpei",
            PacificPonape => "Pacific/Ponape",
            PacificPortMoresby => "Pacific/Port_Moresby",
            PacificRarotonga => "Pacific/Rarotonga",
            PacificSaipan => "Pacific/Saipan",
            PacificSamoa => "Pacific/Samoa",
            PacificTahiti => "Pacific/Tahiti",
            PacificTarawa => "Pacific/Tarawa",
            PacificTongatapu => "Pacific/Tongatapu",
            PacificTruk => "Pacific/Truk",
            PacificWake => "Pacific/Wake",
            PacificWallis => "Pacific/Wallis",
            PacificYap => "Pacific/Yap",
            Poland => "Poland",
            Portugal => "Portugal",
            Roc => "ROC",
            Rok => "ROK",
            Singapore => "Singapore",
            Turkey => "Turkey",
            Uct => "UCT",
            UsAlaska => "US/Alaska",
            UsAleutian => "US/Aleutian",
            UsArizona => "US/Arizona",
            UsCentral => "US/Central",
            UsEastMinusIndiana => "US/East-Indiana",
            UsEastern => "US/Eastern",
            UsHawaii => "US/Hawaii",
            UsIndianaMinusStarke => "US/Indiana-Starke",
            UsMichigan => "US/Michigan",
            UsMountain => "US/Mountain",
            UsPacific => "US/Pacific",
            UsPacificMinusNew => "US/Pacific-New",
            UsSamoa => "US/Samoa",
            Utc => "UTC",
            Universal => "Universal",
            WMinusSu => "W-SU",
            Wet => "WET",
            Zulu => "Zulu",
            Unknown => "unknown",
        }
    }
}

impl std::str::FromStr for CreateReportingReportRunParametersTimezone {
    type Err = std::convert::Infallible;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        use CreateReportingReportRunParametersTimezone::*;
        match s {
            "Africa/Abidjan" => Ok(AfricaAbidjan),
            "Africa/Accra" => Ok(AfricaAccra),
            "Africa/Addis_Ababa" => Ok(AfricaAddisAbaba),
            "Africa/Algiers" => Ok(AfricaAlgiers),
            "Africa/Asmara" => Ok(AfricaAsmara),
            "Africa/Asmera" => Ok(AfricaAsmera),
            "Africa/Bamako" => Ok(AfricaBamako),
            "Africa/Bangui" => Ok(AfricaBangui),
            "Africa/Banjul" => Ok(AfricaBanjul),
            "Africa/Bissau" => Ok(AfricaBissau),
            "Africa/Blantyre" => Ok(AfricaBlantyre),
            "Africa/Brazzaville" => Ok(AfricaBrazzaville),
            "Africa/Bujumbura" => Ok(AfricaBujumbura),
            "Africa/Cairo" => Ok(AfricaCairo),
            "Africa/Casablanca" => Ok(AfricaCasablanca),
            "Africa/Ceuta" => Ok(AfricaCeuta),
            "Africa/Conakry" => Ok(AfricaConakry),
            "Africa/Dakar" => Ok(AfricaDakar),
            "Africa/Dar_es_Salaam" => Ok(AfricaDarEsSalaam),
            "Africa/Djibouti" => Ok(AfricaDjibouti),
            "Africa/Douala" => Ok(AfricaDouala),
            "Africa/El_Aaiun" => Ok(AfricaElAaiun),
            "Africa/Freetown" => Ok(AfricaFreetown),
            "Africa/Gaborone" => Ok(AfricaGaborone),
            "Africa/Harare" => Ok(AfricaHarare),
            "Africa/Johannesburg" => Ok(AfricaJohannesburg),
            "Africa/Juba" => Ok(AfricaJuba),
            "Africa/Kampala" => Ok(AfricaKampala),
            "Africa/Khartoum" => Ok(AfricaKhartoum),
            "Africa/Kigali" => Ok(AfricaKigali),
            "Africa/Kinshasa" => Ok(AfricaKinshasa),
            "Africa/Lagos" => Ok(AfricaLagos),
            "Africa/Libreville" => Ok(AfricaLibreville),
            "Africa/Lome" => Ok(AfricaLome),
            "Africa/Luanda" => Ok(AfricaLuanda),
            "Africa/Lubumbashi" => Ok(AfricaLubumbashi),
            "Africa/Lusaka" => Ok(AfricaLusaka),
            "Africa/Malabo" => Ok(AfricaMalabo),
            "Africa/Maputo" => Ok(AfricaMaputo),
            "Africa/Maseru" => Ok(AfricaMaseru),
            "Africa/Mbabane" => Ok(AfricaMbabane),
            "Africa/Mogadishu" => Ok(AfricaMogadishu),
            "Africa/Monrovia" => Ok(AfricaMonrovia),
            "Africa/Nairobi" => Ok(AfricaNairobi),
            "Africa/Ndjamena" => Ok(AfricaNdjamena),
            "Africa/Niamey" => Ok(AfricaNiamey),
            "Africa/Nouakchott" => Ok(AfricaNouakchott),
            "Africa/Ouagadougou" => Ok(AfricaOuagadougou),
            "Africa/Porto-Novo" => Ok(AfricaPortoMinusNovo),
            "Africa/Sao_Tome" => Ok(AfricaSaoTome),
            "Africa/Timbuktu" => Ok(AfricaTimbuktu),
            "Africa/Tripoli" => Ok(AfricaTripoli),
            "Africa/Tunis" => Ok(AfricaTunis),
            "Africa/Windhoek" => Ok(AfricaWindhoek),
            "America/Adak" => Ok(AmericaAdak),
            "America/Anchorage" => Ok(AmericaAnchorage),
            "America/Anguilla" => Ok(AmericaAnguilla),
            "America/Antigua" => Ok(AmericaAntigua),
            "America/Araguaina" => Ok(AmericaAraguaina),
            "America/Argentina/Buenos_Aires" => Ok(AmericaArgentinaBuenosAires),
            "America/Argentina/Catamarca" => Ok(AmericaArgentinaCatamarca),
            "America/Argentina/ComodRivadavia" => Ok(AmericaArgentinaComodRivadavia),
            "America/Argentina/Cordoba" => Ok(AmericaArgentinaCordoba),
            "America/Argentina/Jujuy" => Ok(AmericaArgentinaJujuy),
            "America/Argentina/La_Rioja" => Ok(AmericaArgentinaLaRioja),
            "America/Argentina/Mendoza" => Ok(AmericaArgentinaMendoza),
            "America/Argentina/Rio_Gallegos" => Ok(AmericaArgentinaRioGallegos),
            "America/Argentina/Salta" => Ok(AmericaArgentinaSalta),
            "America/Argentina/San_Juan" => Ok(AmericaArgentinaSanJuan),
            "America/Argentina/San_Luis" => Ok(AmericaArgentinaSanLuis),
            "America/Argentina/Tucuman" => Ok(AmericaArgentinaTucuman),
            "America/Argentina/Ushuaia" => Ok(AmericaArgentinaUshuaia),
            "America/Aruba" => Ok(AmericaAruba),
            "America/Asuncion" => Ok(AmericaAsuncion),
            "America/Atikokan" => Ok(AmericaAtikokan),
            "America/Atka" => Ok(AmericaAtka),
            "America/Bahia" => Ok(AmericaBahia),
            "America/Bahia_Banderas" => Ok(AmericaBahiaBanderas),
            "America/Barbados" => Ok(AmericaBarbados),
            "America/Belem" => Ok(AmericaBelem),
            "America/Belize" => Ok(AmericaBelize),
            "America/Blanc-Sablon" => Ok(AmericaBlancMinusSablon),
            "America/Boa_Vista" => Ok(AmericaBoaVista),
            "America/Bogota" => Ok(AmericaBogota),
            "America/Boise" => Ok(AmericaBoise),
            "America/Buenos_Aires" => Ok(AmericaBuenosAires),
            "America/Cambridge_Bay" => Ok(AmericaCambridgeBay),
            "America/Campo_Grande" => Ok(AmericaCampoGrande),
            "America/Cancun" => Ok(AmericaCancun),
            "America/Caracas" => Ok(AmericaCaracas),
            "America/Catamarca" => Ok(AmericaCatamarca),
            "America/Cayenne" => Ok(AmericaCayenne),
            "America/Cayman" => Ok(AmericaCayman),
            "America/Chicago" => Ok(AmericaChicago),
            "America/Chihuahua" => Ok(AmericaChihuahua),
            "America/Ciudad_Juarez" => Ok(AmericaCiudadJuarez),
            "America/Coral_Harbour" => Ok(AmericaCoralHarbour),
            "America/Cordoba" => Ok(AmericaCordoba),
            "America/Costa_Rica" => Ok(AmericaCostaRica),
            "America/Creston" => Ok(AmericaCreston),
            "America/Cuiaba" => Ok(AmericaCuiaba),
            "America/Curacao" => Ok(AmericaCuracao),
            "America/Danmarkshavn" => Ok(AmericaDanmarkshavn),
            "America/Dawson" => Ok(AmericaDawson),
            "America/Dawson_Creek" => Ok(AmericaDawsonCreek),
            "America/Denver" => Ok(AmericaDenver),
            "America/Detroit" => Ok(AmericaDetroit),
            "America/Dominica" => Ok(AmericaDominica),
            "America/Edmonton" => Ok(AmericaEdmonton),
            "America/Eirunepe" => Ok(AmericaEirunepe),
            "America/El_Salvador" => Ok(AmericaElSalvador),
            "America/Ensenada" => Ok(AmericaEnsenada),
            "America/Fort_Nelson" => Ok(AmericaFortNelson),
            "America/Fort_Wayne" => Ok(AmericaFortWayne),
            "America/Fortaleza" => Ok(AmericaFortaleza),
            "America/Glace_Bay" => Ok(AmericaGlaceBay),
            "America/Godthab" => Ok(AmericaGodthab),
            "America/Goose_Bay" => Ok(AmericaGooseBay),
            "America/Grand_Turk" => Ok(AmericaGrandTurk),
            "America/Grenada" => Ok(AmericaGrenada),
            "America/Guadeloupe" => Ok(AmericaGuadeloupe),
            "America/Guatemala" => Ok(AmericaGuatemala),
            "America/Guayaquil" => Ok(AmericaGuayaquil),
            "America/Guyana" => Ok(AmericaGuyana),
            "America/Halifax" => Ok(AmericaHalifax),
            "America/Havana" => Ok(AmericaHavana),
            "America/Hermosillo" => Ok(AmericaHermosillo),
            "America/Indiana/Indianapolis" => Ok(AmericaIndianaIndianapolis),
            "America/Indiana/Knox" => Ok(AmericaIndianaKnox),
            "America/Indiana/Marengo" => Ok(AmericaIndianaMarengo),
            "America/Indiana/Petersburg" => Ok(AmericaIndianaPetersburg),
            "America/Indiana/Tell_City" => Ok(AmericaIndianaTellCity),
            "America/Indiana/Vevay" => Ok(AmericaIndianaVevay),
            "America/Indiana/Vincennes" => Ok(AmericaIndianaVincennes),
            "America/Indiana/Winamac" => Ok(AmericaIndianaWinamac),
            "America/Indianapolis" => Ok(AmericaIndianapolis),
            "America/Inuvik" => Ok(AmericaInuvik),
            "America/Iqaluit" => Ok(AmericaIqaluit),
            "America/Jamaica" => Ok(AmericaJamaica),
            "America/Jujuy" => Ok(AmericaJujuy),
            "America/Juneau" => Ok(AmericaJuneau),
            "America/Kentucky/Louisville" => Ok(AmericaKentuckyLouisville),
            "America/Kentucky/Monticello" => Ok(AmericaKentuckyMonticello),
            "America/Knox_IN" => Ok(AmericaKnoxIn),
            "America/Kralendijk" => Ok(AmericaKralendijk),
            "America/La_Paz" => Ok(AmericaLaPaz),
            "America/Lima" => Ok(AmericaLima),
            "America/Los_Angeles" => Ok(AmericaLosAngeles),
            "America/Louisville" => Ok(AmericaLouisville),
            "America/Lower_Princes" => Ok(AmericaLowerPrinces),
            "America/Maceio" => Ok(AmericaMaceio),
            "America/Managua" => Ok(AmericaManagua),
            "America/Manaus" => Ok(AmericaManaus),
            "America/Marigot" => Ok(AmericaMarigot),
            "America/Martinique" => Ok(AmericaMartinique),
            "America/Matamoros" => Ok(AmericaMatamoros),
            "America/Mazatlan" => Ok(AmericaMazatlan),
            "America/Mendoza" => Ok(AmericaMendoza),
            "America/Menominee" => Ok(AmericaMenominee),
            "America/Merida" => Ok(AmericaMerida),
            "America/Metlakatla" => Ok(AmericaMetlakatla),
            "America/Mexico_City" => Ok(AmericaMexicoCity),
            "America/Miquelon" => Ok(AmericaMiquelon),
            "America/Moncton" => Ok(AmericaMoncton),
            "America/Monterrey" => Ok(AmericaMonterrey),
            "America/Montevideo" => Ok(AmericaMontevideo),
            "America/Montreal" => Ok(AmericaMontreal),
            "America/Montserrat" => Ok(AmericaMontserrat),
            "America/Nassau" => Ok(AmericaNassau),
            "America/New_York" => Ok(AmericaNewYork),
            "America/Nipigon" => Ok(AmericaNipigon),
            "America/Nome" => Ok(AmericaNome),
            "America/Noronha" => Ok(AmericaNoronha),
            "America/North_Dakota/Beulah" => Ok(AmericaNorthDakotaBeulah),
            "America/North_Dakota/Center" => Ok(AmericaNorthDakotaCenter),
            "America/North_Dakota/New_Salem" => Ok(AmericaNorthDakotaNewSalem),
            "America/Nuuk" => Ok(AmericaNuuk),
            "America/Ojinaga" => Ok(AmericaOjinaga),
            "America/Panama" => Ok(AmericaPanama),
            "America/Pangnirtung" => Ok(AmericaPangnirtung),
            "America/Paramaribo" => Ok(AmericaParamaribo),
            "America/Phoenix" => Ok(AmericaPhoenix),
            "America/Port-au-Prince" => Ok(AmericaPortMinusauMinusPrince),
            "America/Port_of_Spain" => Ok(AmericaPortOfSpain),
            "America/Porto_Acre" => Ok(AmericaPortoAcre),
            "America/Porto_Velho" => Ok(AmericaPortoVelho),
            "America/Puerto_Rico" => Ok(AmericaPuertoRico),
            "America/Punta_Arenas" => Ok(AmericaPuntaArenas),
            "America/Rainy_River" => Ok(AmericaRainyRiver),
            "America/Rankin_Inlet" => Ok(AmericaRankinInlet),
            "America/Recife" => Ok(AmericaRecife),
            "America/Regina" => Ok(AmericaRegina),
            "America/Resolute" => Ok(AmericaResolute),
            "America/Rio_Branco" => Ok(AmericaRioBranco),
            "America/Rosario" => Ok(AmericaRosario),
            "America/Santa_Isabel" => Ok(AmericaSantaIsabel),
            "America/Santarem" => Ok(AmericaSantarem),
            "America/Santiago" => Ok(AmericaSantiago),
            "America/Santo_Domingo" => Ok(AmericaSantoDomingo),
            "America/Sao_Paulo" => Ok(AmericaSaoPaulo),
            "America/Scoresbysund" => Ok(AmericaScoresbysund),
            "America/Shiprock" => Ok(AmericaShiprock),
            "America/Sitka" => Ok(AmericaSitka),
            "America/St_Barthelemy" => Ok(AmericaStBarthelemy),
            "America/St_Johns" => Ok(AmericaStJohns),
            "America/St_Kitts" => Ok(AmericaStKitts),
            "America/St_Lucia" => Ok(AmericaStLucia),
            "America/St_Thomas" => Ok(AmericaStThomas),
            "America/St_Vincent" => Ok(AmericaStVincent),
            "America/Swift_Current" => Ok(AmericaSwiftCurrent),
            "America/Tegucigalpa" => Ok(AmericaTegucigalpa),
            "America/Thule" => Ok(AmericaThule),
            "America/Thunder_Bay" => Ok(AmericaThunderBay),
            "America/Tijuana" => Ok(AmericaTijuana),
            "America/Toronto" => Ok(AmericaToronto),
            "America/Tortola" => Ok(AmericaTortola),
            "America/Vancouver" => Ok(AmericaVancouver),
            "America/Virgin" => Ok(AmericaVirgin),
            "America/Whitehorse" => Ok(AmericaWhitehorse),
            "America/Winnipeg" => Ok(AmericaWinnipeg),
            "America/Yakutat" => Ok(AmericaYakutat),
            "America/Yellowknife" => Ok(AmericaYellowknife),
            "Antarctica/Casey" => Ok(AntarcticaCasey),
            "Antarctica/Davis" => Ok(AntarcticaDavis),
            "Antarctica/DumontDUrville" => Ok(AntarcticaDumontDUrville),
            "Antarctica/Macquarie" => Ok(AntarcticaMacquarie),
            "Antarctica/Mawson" => Ok(AntarcticaMawson),
            "Antarctica/McMurdo" => Ok(AntarcticaMcMurdo),
            "Antarctica/Palmer" => Ok(AntarcticaPalmer),
            "Antarctica/Rothera" => Ok(AntarcticaRothera),
            "Antarctica/South_Pole" => Ok(AntarcticaSouthPole),
            "Antarctica/Syowa" => Ok(AntarcticaSyowa),
            "Antarctica/Troll" => Ok(AntarcticaTroll),
            "Antarctica/Vostok" => Ok(AntarcticaVostok),
            "Arctic/Longyearbyen" => Ok(ArcticLongyearbyen),
            "Asia/Aden" => Ok(AsiaAden),
            "Asia/Almaty" => Ok(AsiaAlmaty),
            "Asia/Amman" => Ok(AsiaAmman),
            "Asia/Anadyr" => Ok(AsiaAnadyr),
            "Asia/Aqtau" => Ok(AsiaAqtau),
            "Asia/Aqtobe" => Ok(AsiaAqtobe),
            "Asia/Ashgabat" => Ok(AsiaAshgabat),
            "Asia/Ashkhabad" => Ok(AsiaAshkhabad),
            "Asia/Atyrau" => Ok(AsiaAtyrau),
            "Asia/Baghdad" => Ok(AsiaBaghdad),
            "Asia/Bahrain" => Ok(AsiaBahrain),
            "Asia/Baku" => Ok(AsiaBaku),
            "Asia/Bangkok" => Ok(AsiaBangkok),
            "Asia/Barnaul" => Ok(AsiaBarnaul),
            "Asia/Beirut" => Ok(AsiaBeirut),
            "Asia/Bishkek" => Ok(AsiaBishkek),
            "Asia/Brunei" => Ok(AsiaBrunei),
            "Asia/Calcutta" => Ok(AsiaCalcutta),
            "Asia/Chita" => Ok(AsiaChita),
            "Asia/Choibalsan" => Ok(AsiaChoibalsan),
            "Asia/Chongqing" => Ok(AsiaChongqing),
            "Asia/Chungking" => Ok(AsiaChungking),
            "Asia/Colombo" => Ok(AsiaColombo),
            "Asia/Dacca" => Ok(AsiaDacca),
            "Asia/Damascus" => Ok(AsiaDamascus),
            "Asia/Dhaka" => Ok(AsiaDhaka),
            "Asia/Dili" => Ok(AsiaDili),
            "Asia/Dubai" => Ok(AsiaDubai),
            "Asia/Dushanbe" => Ok(AsiaDushanbe),
            "Asia/Famagusta" => Ok(AsiaFamagusta),
            "Asia/Gaza" => Ok(AsiaGaza),
            "Asia/Harbin" => Ok(AsiaHarbin),
            "Asia/Hebron" => Ok(AsiaHebron),
            "Asia/Ho_Chi_Minh" => Ok(AsiaHoChiMinh),
            "Asia/Hong_Kong" => Ok(AsiaHongKong),
            "Asia/Hovd" => Ok(AsiaHovd),
            "Asia/Irkutsk" => Ok(AsiaIrkutsk),
            "Asia/Istanbul" => Ok(AsiaIstanbul),
            "Asia/Jakarta" => Ok(AsiaJakarta),
            "Asia/Jayapura" => Ok(AsiaJayapura),
            "Asia/Jerusalem" => Ok(AsiaJerusalem),
            "Asia/Kabul" => Ok(AsiaKabul),
            "Asia/Kamchatka" => Ok(AsiaKamchatka),
            "Asia/Karachi" => Ok(AsiaKarachi),
            "Asia/Kashgar" => Ok(AsiaKashgar),
            "Asia/Kathmandu" => Ok(AsiaKathmandu),
            "Asia/Katmandu" => Ok(AsiaKatmandu),
            "Asia/Khandyga" => Ok(AsiaKhandyga),
            "Asia/Kolkata" => Ok(AsiaKolkata),
            "Asia/Krasnoyarsk" => Ok(AsiaKrasnoyarsk),
            "Asia/Kuala_Lumpur" => Ok(AsiaKualaLumpur),
            "Asia/Kuching" => Ok(AsiaKuching),
            "Asia/Kuwait" => Ok(AsiaKuwait),
            "Asia/Macao" => Ok(AsiaMacao),
            "Asia/Macau" => Ok(AsiaMacau),
            "Asia/Magadan" => Ok(AsiaMagadan),
            "Asia/Makassar" => Ok(AsiaMakassar),
            "Asia/Manila" => Ok(AsiaManila),
            "Asia/Muscat" => Ok(AsiaMuscat),
            "Asia/Nicosia" => Ok(AsiaNicosia),
            "Asia/Novokuznetsk" => Ok(AsiaNovokuznetsk),
            "Asia/Novosibirsk" => Ok(AsiaNovosibirsk),
            "Asia/Omsk" => Ok(AsiaOmsk),
            "Asia/Oral" => Ok(AsiaOral),
            "Asia/Phnom_Penh" => Ok(AsiaPhnomPenh),
            "Asia/Pontianak" => Ok(AsiaPontianak),
            "Asia/Pyongyang" => Ok(AsiaPyongyang),
            "Asia/Qatar" => Ok(AsiaQatar),
            "Asia/Qostanay" => Ok(AsiaQostanay),
            "Asia/Qyzylorda" => Ok(AsiaQyzylorda),
            "Asia/Rangoon" => Ok(AsiaRangoon),
            "Asia/Riyadh" => Ok(AsiaRiyadh),
            "Asia/Saigon" => Ok(AsiaSaigon),
            "Asia/Sakhalin" => Ok(AsiaSakhalin),
            "Asia/Samarkand" => Ok(AsiaSamarkand),
            "Asia/Seoul" => Ok(AsiaSeoul),
            "Asia/Shanghai" => Ok(AsiaShanghai),
            "Asia/Singapore" => Ok(AsiaSingapore),
            "Asia/Srednekolymsk" => Ok(AsiaSrednekolymsk),
            "Asia/Taipei" => Ok(AsiaTaipei),
            "Asia/Tashkent" => Ok(AsiaTashkent),
            "Asia/Tbilisi" => Ok(AsiaTbilisi),
            "Asia/Tehran" => Ok(AsiaTehran),
            "Asia/Tel_Aviv" => Ok(AsiaTelAviv),
            "Asia/Thimbu" => Ok(AsiaThimbu),
            "Asia/Thimphu" => Ok(AsiaThimphu),
            "Asia/Tokyo" => Ok(AsiaTokyo),
            "Asia/Tomsk" => Ok(AsiaTomsk),
            "Asia/Ujung_Pandang" => Ok(AsiaUjungPandang),
            "Asia/Ulaanbaatar" => Ok(AsiaUlaanbaatar),
            "Asia/Ulan_Bator" => Ok(AsiaUlanBator),
            "Asia/Urumqi" => Ok(AsiaUrumqi),
            "Asia/Ust-Nera" => Ok(AsiaUstMinusNera),
            "Asia/Vientiane" => Ok(AsiaVientiane),
            "Asia/Vladivostok" => Ok(AsiaVladivostok),
            "Asia/Yakutsk" => Ok(AsiaYakutsk),
            "Asia/Yangon" => Ok(AsiaYangon),
            "Asia/Yekaterinburg" => Ok(AsiaYekaterinburg),
            "Asia/Yerevan" => Ok(AsiaYerevan),
            "Atlantic/Azores" => Ok(AtlanticAzores),
            "Atlantic/Bermuda" => Ok(AtlanticBermuda),
            "Atlantic/Canary" => Ok(AtlanticCanary),
            "Atlantic/Cape_Verde" => Ok(AtlanticCapeVerde),
            "Atlantic/Faeroe" => Ok(AtlanticFaeroe),
            "Atlantic/Faroe" => Ok(AtlanticFaroe),
            "Atlantic/Jan_Mayen" => Ok(AtlanticJanMayen),
            "Atlantic/Madeira" => Ok(AtlanticMadeira),
            "Atlantic/Reykjavik" => Ok(AtlanticReykjavik),
            "Atlantic/South_Georgia" => Ok(AtlanticSouthGeorgia),
            "Atlantic/St_Helena" => Ok(AtlanticStHelena),
            "Atlantic/Stanley" => Ok(AtlanticStanley),
            "Australia/ACT" => Ok(AustraliaAct),
            "Australia/Adelaide" => Ok(AustraliaAdelaide),
            "Australia/Brisbane" => Ok(AustraliaBrisbane),
            "Australia/Broken_Hill" => Ok(AustraliaBrokenHill),
            "Australia/Canberra" => Ok(AustraliaCanberra),
            "Australia/Currie" => Ok(AustraliaCurrie),
            "Australia/Darwin" => Ok(AustraliaDarwin),
            "Australia/Eucla" => Ok(AustraliaEucla),
            "Australia/Hobart" => Ok(AustraliaHobart),
            "Australia/LHI" => Ok(AustraliaLhi),
            "Australia/Lindeman" => Ok(AustraliaLindeman),
            "Australia/Lord_Howe" => Ok(AustraliaLordHowe),
            "Australia/Melbourne" => Ok(AustraliaMelbourne),
            "Australia/NSW" => Ok(AustraliaNsw),
            "Australia/North" => Ok(AustraliaNorth),
            "Australia/Perth" => Ok(AustraliaPerth),
            "Australia/Queensland" => Ok(AustraliaQueensland),
            "Australia/South" => Ok(AustraliaSouth),
            "Australia/Sydney" => Ok(AustraliaSydney),
            "Australia/Tasmania" => Ok(AustraliaTasmania),
            "Australia/Victoria" => Ok(AustraliaVictoria),
            "Australia/West" => Ok(AustraliaWest),
            "Australia/Yancowinna" => Ok(AustraliaYancowinna),
            "Brazil/Acre" => Ok(BrazilAcre),
            "Brazil/DeNoronha" => Ok(BrazilDeNoronha),
            "Brazil/East" => Ok(BrazilEast),
            "Brazil/West" => Ok(BrazilWest),
            "CET" => Ok(Cet),
            "CST6CDT" => Ok(Cst6cdt),
            "Canada/Atlantic" => Ok(CanadaAtlantic),
            "Canada/Central" => Ok(CanadaCentral),
            "Canada/Eastern" => Ok(CanadaEastern),
            "Canada/Mountain" => Ok(CanadaMountain),
            "Canada/Newfoundland" => Ok(CanadaNewfoundland),
            "Canada/Pacific" => Ok(CanadaPacific),
            "Canada/Saskatchewan" => Ok(CanadaSaskatchewan),
            "Canada/Yukon" => Ok(CanadaYukon),
            "Chile/Continental" => Ok(ChileContinental),
            "Chile/EasterIsland" => Ok(ChileEasterIsland),
            "Cuba" => Ok(Cuba),
            "EET" => Ok(Eet),
            "EST" => Ok(Est),
            "EST5EDT" => Ok(Est5edt),
            "Egypt" => Ok(Egypt),
            "Eire" => Ok(Eire),
            "Etc/GMT" => Ok(EtcGmt),
            "Etc/GMT+0" => Ok(EtcGmtPlus0),
            "Etc/GMT+1" => Ok(EtcGmtPlus1),
            "Etc/GMT+10" => Ok(EtcGmtPlus10),
            "Etc/GMT+11" => Ok(EtcGmtPlus11),
            "Etc/GMT+12" => Ok(EtcGmtPlus12),
            "Etc/GMT+2" => Ok(EtcGmtPlus2),
            "Etc/GMT+3" => Ok(EtcGmtPlus3),
            "Etc/GMT+4" => Ok(EtcGmtPlus4),
            "Etc/GMT+5" => Ok(EtcGmtPlus5),
            "Etc/GMT+6" => Ok(EtcGmtPlus6),
            "Etc/GMT+7" => Ok(EtcGmtPlus7),
            "Etc/GMT+8" => Ok(EtcGmtPlus8),
            "Etc/GMT+9" => Ok(EtcGmtPlus9),
            "Etc/GMT-0" => Ok(EtcGmtMinus0),
            "Etc/GMT-1" => Ok(EtcGmtMinus1),
            "Etc/GMT-10" => Ok(EtcGmtMinus10),
            "Etc/GMT-11" => Ok(EtcGmtMinus11),
            "Etc/GMT-12" => Ok(EtcGmtMinus12),
            "Etc/GMT-13" => Ok(EtcGmtMinus13),
            "Etc/GMT-14" => Ok(EtcGmtMinus14),
            "Etc/GMT-2" => Ok(EtcGmtMinus2),
            "Etc/GMT-3" => Ok(EtcGmtMinus3),
            "Etc/GMT-4" => Ok(EtcGmtMinus4),
            "Etc/GMT-5" => Ok(EtcGmtMinus5),
            "Etc/GMT-6" => Ok(EtcGmtMinus6),
            "Etc/GMT-7" => Ok(EtcGmtMinus7),
            "Etc/GMT-8" => Ok(EtcGmtMinus8),
            "Etc/GMT-9" => Ok(EtcGmtMinus9),
            "Etc/GMT0" => Ok(EtcGmt0),
            "Etc/Greenwich" => Ok(EtcGreenwich),
            "Etc/UCT" => Ok(EtcUct),
            "Etc/UTC" => Ok(EtcUtc),
            "Etc/Universal" => Ok(EtcUniversal),
            "Etc/Zulu" => Ok(EtcZulu),
            "Europe/Amsterdam" => Ok(EuropeAmsterdam),
            "Europe/Andorra" => Ok(EuropeAndorra),
            "Europe/Astrakhan" => Ok(EuropeAstrakhan),
            "Europe/Athens" => Ok(EuropeAthens),
            "Europe/Belfast" => Ok(EuropeBelfast),
            "Europe/Belgrade" => Ok(EuropeBelgrade),
            "Europe/Berlin" => Ok(EuropeBerlin),
            "Europe/Bratislava" => Ok(EuropeBratislava),
            "Europe/Brussels" => Ok(EuropeBrussels),
            "Europe/Bucharest" => Ok(EuropeBucharest),
            "Europe/Budapest" => Ok(EuropeBudapest),
            "Europe/Busingen" => Ok(EuropeBusingen),
            "Europe/Chisinau" => Ok(EuropeChisinau),
            "Europe/Copenhagen" => Ok(EuropeCopenhagen),
            "Europe/Dublin" => Ok(EuropeDublin),
            "Europe/Gibraltar" => Ok(EuropeGibraltar),
            "Europe/Guernsey" => Ok(EuropeGuernsey),
            "Europe/Helsinki" => Ok(EuropeHelsinki),
            "Europe/Isle_of_Man" => Ok(EuropeIsleOfMan),
            "Europe/Istanbul" => Ok(EuropeIstanbul),
            "Europe/Jersey" => Ok(EuropeJersey),
            "Europe/Kaliningrad" => Ok(EuropeKaliningrad),
            "Europe/Kiev" => Ok(EuropeKiev),
            "Europe/Kirov" => Ok(EuropeKirov),
            "Europe/Kyiv" => Ok(EuropeKyiv),
            "Europe/Lisbon" => Ok(EuropeLisbon),
            "Europe/Ljubljana" => Ok(EuropeLjubljana),
            "Europe/London" => Ok(EuropeLondon),
            "Europe/Luxembourg" => Ok(EuropeLuxembourg),
            "Europe/Madrid" => Ok(EuropeMadrid),
            "Europe/Malta" => Ok(EuropeMalta),
            "Europe/Mariehamn" => Ok(EuropeMariehamn),
            "Europe/Minsk" => Ok(EuropeMinsk),
            "Europe/Monaco" => Ok(EuropeMonaco),
            "Europe/Moscow" => Ok(EuropeMoscow),
            "Europe/Nicosia" => Ok(EuropeNicosia),
            "Europe/Oslo" => Ok(EuropeOslo),
            "Europe/Paris" => Ok(EuropeParis),
            "Europe/Podgorica" => Ok(EuropePodgorica),
            "Europe/Prague" => Ok(EuropePrague),
            "Europe/Riga" => Ok(EuropeRiga),
            "Europe/Rome" => Ok(EuropeRome),
            "Europe/Samara" => Ok(EuropeSamara),
            "Europe/San_Marino" => Ok(EuropeSanMarino),
            "Europe/Sarajevo" => Ok(EuropeSarajevo),
            "Europe/Saratov" => Ok(EuropeSaratov),
            "Europe/Simferopol" => Ok(EuropeSimferopol),
            "Europe/Skopje" => Ok(EuropeSkopje),
            "Europe/Sofia" => Ok(EuropeSofia),
            "Europe/Stockholm" => Ok(EuropeStockholm),
            "Europe/Tallinn" => Ok(EuropeTallinn),
            "Europe/Tirane" => Ok(EuropeTirane),
            "Europe/Tiraspol" => Ok(EuropeTiraspol),
            "Europe/Ulyanovsk" => Ok(EuropeUlyanovsk),
            "Europe/Uzhgorod" => Ok(EuropeUzhgorod),
            "Europe/Vaduz" => Ok(EuropeVaduz),
            "Europe/Vatican" => Ok(EuropeVatican),
            "Europe/Vienna" => Ok(EuropeVienna),
            "Europe/Vilnius" => Ok(EuropeVilnius),
            "Europe/Volgograd" => Ok(EuropeVolgograd),
            "Europe/Warsaw" => Ok(EuropeWarsaw),
            "Europe/Zagreb" => Ok(EuropeZagreb),
            "Europe/Zaporozhye" => Ok(EuropeZaporozhye),
            "Europe/Zurich" => Ok(EuropeZurich),
            "Factory" => Ok(Factory),
            "GB" => Ok(Gb),
            "GB-Eire" => Ok(GbMinusEire),
            "GMT" => Ok(Gmt),
            "GMT+0" => Ok(GmtPlus0),
            "GMT-0" => Ok(GmtMinus0),
            "GMT0" => Ok(Gmt0),
            "Greenwich" => Ok(Greenwich),
            "HST" => Ok(Hst),
            "Hongkong" => Ok(Hongkong),
            "Iceland" => Ok(Iceland),
            "Indian/Antananarivo" => Ok(IndianAntananarivo),
            "Indian/Chagos" => Ok(IndianChagos),
            "Indian/Christmas" => Ok(IndianChristmas),
            "Indian/Cocos" => Ok(IndianCocos),
            "Indian/Comoro" => Ok(IndianComoro),
            "Indian/Kerguelen" => Ok(IndianKerguelen),
            "Indian/Mahe" => Ok(IndianMahe),
            "Indian/Maldives" => Ok(IndianMaldives),
            "Indian/Mauritius" => Ok(IndianMauritius),
            "Indian/Mayotte" => Ok(IndianMayotte),
            "Indian/Reunion" => Ok(IndianReunion),
            "Iran" => Ok(Iran),
            "Israel" => Ok(Israel),
            "Jamaica" => Ok(Jamaica),
            "Japan" => Ok(Japan),
            "Kwajalein" => Ok(Kwajalein),
            "Libya" => Ok(Libya),
            "MET" => Ok(Met),
            "MST" => Ok(Mst),
            "MST7MDT" => Ok(Mst7mdt),
            "Mexico/BajaNorte" => Ok(MexicoBajaNorte),
            "Mexico/BajaSur" => Ok(MexicoBajaSur),
            "Mexico/General" => Ok(MexicoGeneral),
            "NZ" => Ok(Nz),
            "NZ-CHAT" => Ok(NzMinusChat),
            "Navajo" => Ok(Navajo),
            "PRC" => Ok(Prc),
            "PST8PDT" => Ok(Pst8pdt),
            "Pacific/Apia" => Ok(PacificApia),
            "Pacific/Auckland" => Ok(PacificAuckland),
            "Pacific/Bougainville" => Ok(PacificBougainville),
            "Pacific/Chatham" => Ok(PacificChatham),
            "Pacific/Chuuk" => Ok(PacificChuuk),
            "Pacific/Easter" => Ok(PacificEaster),
            "Pacific/Efate" => Ok(PacificEfate),
            "Pacific/Enderbury" => Ok(PacificEnderbury),
            "Pacific/Fakaofo" => Ok(PacificFakaofo),
            "Pacific/Fiji" => Ok(PacificFiji),
            "Pacific/Funafuti" => Ok(PacificFunafuti),
            "Pacific/Galapagos" => Ok(PacificGalapagos),
            "Pacific/Gambier" => Ok(PacificGambier),
            "Pacific/Guadalcanal" => Ok(PacificGuadalcanal),
            "Pacific/Guam" => Ok(PacificGuam),
            "Pacific/Honolulu" => Ok(PacificHonolulu),
            "Pacific/Johnston" => Ok(PacificJohnston),
            "Pacific/Kanton" => Ok(PacificKanton),
            "Pacific/Kiritimati" => Ok(PacificKiritimati),
            "Pacific/Kosrae" => Ok(PacificKosrae),
            "Pacific/Kwajalein" => Ok(PacificKwajalein),
            "Pacific/Majuro" => Ok(PacificMajuro),
            "Pacific/Marquesas" => Ok(PacificMarquesas),
            "Pacific/Midway" => Ok(PacificMidway),
            "Pacific/Nauru" => Ok(PacificNauru),
            "Pacific/Niue" => Ok(PacificNiue),
            "Pacific/Norfolk" => Ok(PacificNorfolk),
            "Pacific/Noumea" => Ok(PacificNoumea),
            "Pacific/Pago_Pago" => Ok(PacificPagoPago),
            "Pacific/Palau" => Ok(PacificPalau),
            "Pacific/Pitcairn" => Ok(PacificPitcairn),
            "Pacific/Pohnpei" => Ok(PacificPohnpei),
            "Pacific/Ponape" => Ok(PacificPonape),
            "Pacific/Port_Moresby" => Ok(PacificPortMoresby),
            "Pacific/Rarotonga" => Ok(PacificRarotonga),
            "Pacific/Saipan" => Ok(PacificSaipan),
            "Pacific/Samoa" => Ok(PacificSamoa),
            "Pacific/Tahiti" => Ok(PacificTahiti),
            "Pacific/Tarawa" => Ok(PacificTarawa),
            "Pacific/Tongatapu" => Ok(PacificTongatapu),
            "Pacific/Truk" => Ok(PacificTruk),
            "Pacific/Wake" => Ok(PacificWake),
            "Pacific/Wallis" => Ok(PacificWallis),
            "Pacific/Yap" => Ok(PacificYap),
            "Poland" => Ok(Poland),
            "Portugal" => Ok(Portugal),
            "ROC" => Ok(Roc),
            "ROK" => Ok(Rok),
            "Singapore" => Ok(Singapore),
            "Turkey" => Ok(Turkey),
            "UCT" => Ok(Uct),
            "US/Alaska" => Ok(UsAlaska),
            "US/Aleutian" => Ok(UsAleutian),
            "US/Arizona" => Ok(UsArizona),
            "US/Central" => Ok(UsCentral),
            "US/East-Indiana" => Ok(UsEastMinusIndiana),
            "US/Eastern" => Ok(UsEastern),
            "US/Hawaii" => Ok(UsHawaii),
            "US/Indiana-Starke" => Ok(UsIndianaMinusStarke),
            "US/Michigan" => Ok(UsMichigan),
            "US/Mountain" => Ok(UsMountain),
            "US/Pacific" => Ok(UsPacific),
            "US/Pacific-New" => Ok(UsPacificMinusNew),
            "US/Samoa" => Ok(UsSamoa),
            "UTC" => Ok(Utc),
            "Universal" => Ok(Universal),
            "W-SU" => Ok(WMinusSu),
            "WET" => Ok(Wet),
            "Zulu" => Ok(Zulu),
            _ => Ok(Self::Unknown),
        }
    }
}
impl std::fmt::Display for CreateReportingReportRunParametersTimezone {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str(self.as_str())
    }
}

impl std::fmt::Debug for CreateReportingReportRunParametersTimezone {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        f.write_str(self.as_str())
    }
}
impl serde::Serialize for CreateReportingReportRunParametersTimezone {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        serializer.serialize_str(self.as_str())
    }
}
#[cfg(feature = "deserialize")]
impl<'de> serde::Deserialize<'de> for CreateReportingReportRunParametersTimezone {
    fn deserialize<D: serde::Deserializer<'de>>(deserializer: D) -> Result<Self, D::Error> {
        use std::str::FromStr;
        let s: std::borrow::Cow<'de, str> = serde::Deserialize::deserialize(deserializer)?;
        Ok(Self::from_str(&s).unwrap())
    }
}
/// Creates a new object and begin running the report.
/// (Certain report types require a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).).
#[derive(Clone, Debug, serde::Serialize)]
pub struct CreateReportingReportRun {
    inner: CreateReportingReportRunBuilder,
}
impl CreateReportingReportRun {
    /// Construct a new `CreateReportingReportRun`.
    pub fn new(report_type: impl Into<String>) -> Self {
        Self { inner: CreateReportingReportRunBuilder::new(report_type.into()) }
    }
    /// Specifies which fields in the response should be expanded.
    pub fn expand(mut self, expand: impl Into<Vec<String>>) -> Self {
        self.inner.expand = Some(expand.into());
        self
    }
    /// Parameters specifying how the report should be run.
    /// Different Report Types have different required and optional parameters, listed in the [API Access to Reports](https://stripe.com/docs/reporting/statements/api) documentation.
    pub fn parameters(mut self, parameters: impl Into<CreateReportingReportRunParameters>) -> Self {
        self.inner.parameters = Some(parameters.into());
        self
    }
}
impl CreateReportingReportRun {
    /// Send the request and return the deserialized response.
    pub async fn send<C: StripeClient>(
        &self,
        client: &C,
    ) -> Result<<Self as StripeRequest>::Output, C::Err> {
        self.customize().send(client).await
    }

    /// Send the request and return the deserialized response, blocking until completion.
    pub fn send_blocking<C: StripeBlockingClient>(
        &self,
        client: &C,
    ) -> Result<<Self as StripeRequest>::Output, C::Err> {
        self.customize().send_blocking(client)
    }
}

impl StripeRequest for CreateReportingReportRun {
    type Output = stripe_misc::ReportingReportRun;

    fn build(&self) -> RequestBuilder {
        RequestBuilder::new(StripeMethod::Post, "/reporting/report_runs").form(&self.inner)
    }
}
