#[derive(Clone, Debug)]
#[cfg_attr(feature = "serialize", derive(serde::Serialize))]
#[cfg_attr(feature = "deserialize", derive(serde::Deserialize))]
pub struct TaxProductRegistrationsResourceCountryOptions {
    pub ae: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods>,
    pub al: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>,
    pub am: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub ao: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>,
    pub at: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub au: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods>,
    pub aw: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>,
    pub az: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub ba: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>,
    pub bb: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>,
    pub bd: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>,
    pub be: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub bf: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>,
    pub bg: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub bh: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>,
    pub bj: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub bs: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>,
    pub by: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub ca: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsCanada>,
    pub cd: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>,
    pub ch: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods>,
    pub cl: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub cm: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub co: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub cr: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub cv: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub cy: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub cz: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub de: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub dk: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub ec: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub ee: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub eg: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub es: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub et: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>,
    pub fi: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub fr: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub gb: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods>,
    pub ge: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub gn: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>,
    pub gr: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub hr: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub hu: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub id: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub ie: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    #[cfg_attr(any(feature = "deserialize", feature = "serialize"), serde(rename = "in"))]
    pub in_: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub is: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>,
    pub it: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub jp: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods>,
    pub ke: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub kg: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub kh: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub kr: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub kz: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub la: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub lt: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub lu: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub lv: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub ma: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub md: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub me: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>,
    pub mk: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>,
    pub mr: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>,
    pub mt: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub mx: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub my: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub ng: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub nl: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub no: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods>,
    pub np: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub nz: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods>,
    pub om: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>,
    pub pe: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub ph: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub pl: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub pt: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub ro: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub rs: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>,
    pub ru: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub sa: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub se: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub sg: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods>,
    pub si: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub sk: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>,
    pub sn: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub sr: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>,
    pub th: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub tj: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub tr: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub tz: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub ug: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub us: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsUnitedStates>,
    pub uy: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>,
    pub uz: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub vn: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub za: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>,
    pub zm: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>,
    pub zw: Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>,
}
#[doc(hidden)]
pub struct TaxProductRegistrationsResourceCountryOptionsBuilder {
    ae: Option<
        Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods>,
    >,
    al: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>>,
    am: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    ao: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>>,
    at: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    au: Option<
        Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods>,
    >,
    aw: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>>,
    az: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    ba: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>>,
    bb: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>>,
    bd: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>>,
    be: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    bf: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>>,
    bg: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    bh: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>>,
    bj: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    bs: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>>,
    by: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    ca: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsCanada>>,
    cd: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>>,
    ch: Option<
        Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods>,
    >,
    cl: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    cm: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    co: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    cr: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    cv: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    cy: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    cz: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    de: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    dk: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    ec: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    ee: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    eg: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    es: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    et: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>>,
    fi: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    fr: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    gb: Option<
        Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods>,
    >,
    ge: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    gn: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>>,
    gr: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    hr: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    hu: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    id: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    ie: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    in_: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    is: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>>,
    it: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    jp: Option<
        Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods>,
    >,
    ke: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    kg: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    kh: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    kr: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    kz: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    la: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    lt: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    lu: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    lv: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    ma: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    md: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    me: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>>,
    mk: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>>,
    mr: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>>,
    mt: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    mx: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    my: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    ng: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    nl: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    no: Option<
        Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods>,
    >,
    np: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    nz: Option<
        Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods>,
    >,
    om: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>>,
    pe: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    ph: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    pl: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    pt: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    ro: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    rs: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>>,
    ru: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    sa: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    se: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    sg: Option<
        Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods>,
    >,
    si: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    sk: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsEurope>>,
    sn: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    sr: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>>,
    th: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    tj: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    tr: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    tz: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    ug: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    us: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsUnitedStates>>,
    uy: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>>,
    uz: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    vn: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    za: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>>,
    zm: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsSimplified>>,
    zw: Option<Option<stripe_misc::TaxProductRegistrationsResourceCountryOptionsDefault>>,
}

#[allow(
    unused_variables,
    irrefutable_let_patterns,
    clippy::let_unit_value,
    clippy::match_single_binding,
    clippy::single_match
)]
const _: () = {
    use miniserde::de::{Map, Visitor};
    use miniserde::json::Value;
    use miniserde::{make_place, Deserialize, Result};
    use stripe_types::miniserde_helpers::FromValueOpt;
    use stripe_types::{MapBuilder, ObjectDeser};

    make_place!(Place);

    impl Deserialize for TaxProductRegistrationsResourceCountryOptions {
        fn begin(out: &mut Option<Self>) -> &mut dyn Visitor {
            Place::new(out)
        }
    }

    struct Builder<'a> {
        out: &'a mut Option<TaxProductRegistrationsResourceCountryOptions>,
        builder: TaxProductRegistrationsResourceCountryOptionsBuilder,
    }

    impl Visitor for Place<TaxProductRegistrationsResourceCountryOptions> {
        fn map(&mut self) -> Result<Box<dyn Map + '_>> {
            Ok(Box::new(Builder {
                out: &mut self.out,
                builder: TaxProductRegistrationsResourceCountryOptionsBuilder::deser_default(),
            }))
        }
    }

    impl MapBuilder for TaxProductRegistrationsResourceCountryOptionsBuilder {
        type Out = TaxProductRegistrationsResourceCountryOptions;
        fn key(&mut self, k: &str) -> Result<&mut dyn Visitor> {
            Ok(match k {
                "ae" => Deserialize::begin(&mut self.ae),
                "al" => Deserialize::begin(&mut self.al),
                "am" => Deserialize::begin(&mut self.am),
                "ao" => Deserialize::begin(&mut self.ao),
                "at" => Deserialize::begin(&mut self.at),
                "au" => Deserialize::begin(&mut self.au),
                "aw" => Deserialize::begin(&mut self.aw),
                "az" => Deserialize::begin(&mut self.az),
                "ba" => Deserialize::begin(&mut self.ba),
                "bb" => Deserialize::begin(&mut self.bb),
                "bd" => Deserialize::begin(&mut self.bd),
                "be" => Deserialize::begin(&mut self.be),
                "bf" => Deserialize::begin(&mut self.bf),
                "bg" => Deserialize::begin(&mut self.bg),
                "bh" => Deserialize::begin(&mut self.bh),
                "bj" => Deserialize::begin(&mut self.bj),
                "bs" => Deserialize::begin(&mut self.bs),
                "by" => Deserialize::begin(&mut self.by),
                "ca" => Deserialize::begin(&mut self.ca),
                "cd" => Deserialize::begin(&mut self.cd),
                "ch" => Deserialize::begin(&mut self.ch),
                "cl" => Deserialize::begin(&mut self.cl),
                "cm" => Deserialize::begin(&mut self.cm),
                "co" => Deserialize::begin(&mut self.co),
                "cr" => Deserialize::begin(&mut self.cr),
                "cv" => Deserialize::begin(&mut self.cv),
                "cy" => Deserialize::begin(&mut self.cy),
                "cz" => Deserialize::begin(&mut self.cz),
                "de" => Deserialize::begin(&mut self.de),
                "dk" => Deserialize::begin(&mut self.dk),
                "ec" => Deserialize::begin(&mut self.ec),
                "ee" => Deserialize::begin(&mut self.ee),
                "eg" => Deserialize::begin(&mut self.eg),
                "es" => Deserialize::begin(&mut self.es),
                "et" => Deserialize::begin(&mut self.et),
                "fi" => Deserialize::begin(&mut self.fi),
                "fr" => Deserialize::begin(&mut self.fr),
                "gb" => Deserialize::begin(&mut self.gb),
                "ge" => Deserialize::begin(&mut self.ge),
                "gn" => Deserialize::begin(&mut self.gn),
                "gr" => Deserialize::begin(&mut self.gr),
                "hr" => Deserialize::begin(&mut self.hr),
                "hu" => Deserialize::begin(&mut self.hu),
                "id" => Deserialize::begin(&mut self.id),
                "ie" => Deserialize::begin(&mut self.ie),
                "in" => Deserialize::begin(&mut self.in_),
                "is" => Deserialize::begin(&mut self.is),
                "it" => Deserialize::begin(&mut self.it),
                "jp" => Deserialize::begin(&mut self.jp),
                "ke" => Deserialize::begin(&mut self.ke),
                "kg" => Deserialize::begin(&mut self.kg),
                "kh" => Deserialize::begin(&mut self.kh),
                "kr" => Deserialize::begin(&mut self.kr),
                "kz" => Deserialize::begin(&mut self.kz),
                "la" => Deserialize::begin(&mut self.la),
                "lt" => Deserialize::begin(&mut self.lt),
                "lu" => Deserialize::begin(&mut self.lu),
                "lv" => Deserialize::begin(&mut self.lv),
                "ma" => Deserialize::begin(&mut self.ma),
                "md" => Deserialize::begin(&mut self.md),
                "me" => Deserialize::begin(&mut self.me),
                "mk" => Deserialize::begin(&mut self.mk),
                "mr" => Deserialize::begin(&mut self.mr),
                "mt" => Deserialize::begin(&mut self.mt),
                "mx" => Deserialize::begin(&mut self.mx),
                "my" => Deserialize::begin(&mut self.my),
                "ng" => Deserialize::begin(&mut self.ng),
                "nl" => Deserialize::begin(&mut self.nl),
                "no" => Deserialize::begin(&mut self.no),
                "np" => Deserialize::begin(&mut self.np),
                "nz" => Deserialize::begin(&mut self.nz),
                "om" => Deserialize::begin(&mut self.om),
                "pe" => Deserialize::begin(&mut self.pe),
                "ph" => Deserialize::begin(&mut self.ph),
                "pl" => Deserialize::begin(&mut self.pl),
                "pt" => Deserialize::begin(&mut self.pt),
                "ro" => Deserialize::begin(&mut self.ro),
                "rs" => Deserialize::begin(&mut self.rs),
                "ru" => Deserialize::begin(&mut self.ru),
                "sa" => Deserialize::begin(&mut self.sa),
                "se" => Deserialize::begin(&mut self.se),
                "sg" => Deserialize::begin(&mut self.sg),
                "si" => Deserialize::begin(&mut self.si),
                "sk" => Deserialize::begin(&mut self.sk),
                "sn" => Deserialize::begin(&mut self.sn),
                "sr" => Deserialize::begin(&mut self.sr),
                "th" => Deserialize::begin(&mut self.th),
                "tj" => Deserialize::begin(&mut self.tj),
                "tr" => Deserialize::begin(&mut self.tr),
                "tz" => Deserialize::begin(&mut self.tz),
                "ug" => Deserialize::begin(&mut self.ug),
                "us" => Deserialize::begin(&mut self.us),
                "uy" => Deserialize::begin(&mut self.uy),
                "uz" => Deserialize::begin(&mut self.uz),
                "vn" => Deserialize::begin(&mut self.vn),
                "za" => Deserialize::begin(&mut self.za),
                "zm" => Deserialize::begin(&mut self.zm),
                "zw" => Deserialize::begin(&mut self.zw),

                _ => <dyn Visitor>::ignore(),
            })
        }

        fn deser_default() -> Self {
            Self {
                ae: Deserialize::default(),
                al: Deserialize::default(),
                am: Deserialize::default(),
                ao: Deserialize::default(),
                at: Deserialize::default(),
                au: Deserialize::default(),
                aw: Deserialize::default(),
                az: Deserialize::default(),
                ba: Deserialize::default(),
                bb: Deserialize::default(),
                bd: Deserialize::default(),
                be: Deserialize::default(),
                bf: Deserialize::default(),
                bg: Deserialize::default(),
                bh: Deserialize::default(),
                bj: Deserialize::default(),
                bs: Deserialize::default(),
                by: Deserialize::default(),
                ca: Deserialize::default(),
                cd: Deserialize::default(),
                ch: Deserialize::default(),
                cl: Deserialize::default(),
                cm: Deserialize::default(),
                co: Deserialize::default(),
                cr: Deserialize::default(),
                cv: Deserialize::default(),
                cy: Deserialize::default(),
                cz: Deserialize::default(),
                de: Deserialize::default(),
                dk: Deserialize::default(),
                ec: Deserialize::default(),
                ee: Deserialize::default(),
                eg: Deserialize::default(),
                es: Deserialize::default(),
                et: Deserialize::default(),
                fi: Deserialize::default(),
                fr: Deserialize::default(),
                gb: Deserialize::default(),
                ge: Deserialize::default(),
                gn: Deserialize::default(),
                gr: Deserialize::default(),
                hr: Deserialize::default(),
                hu: Deserialize::default(),
                id: Deserialize::default(),
                ie: Deserialize::default(),
                in_: Deserialize::default(),
                is: Deserialize::default(),
                it: Deserialize::default(),
                jp: Deserialize::default(),
                ke: Deserialize::default(),
                kg: Deserialize::default(),
                kh: Deserialize::default(),
                kr: Deserialize::default(),
                kz: Deserialize::default(),
                la: Deserialize::default(),
                lt: Deserialize::default(),
                lu: Deserialize::default(),
                lv: Deserialize::default(),
                ma: Deserialize::default(),
                md: Deserialize::default(),
                me: Deserialize::default(),
                mk: Deserialize::default(),
                mr: Deserialize::default(),
                mt: Deserialize::default(),
                mx: Deserialize::default(),
                my: Deserialize::default(),
                ng: Deserialize::default(),
                nl: Deserialize::default(),
                no: Deserialize::default(),
                np: Deserialize::default(),
                nz: Deserialize::default(),
                om: Deserialize::default(),
                pe: Deserialize::default(),
                ph: Deserialize::default(),
                pl: Deserialize::default(),
                pt: Deserialize::default(),
                ro: Deserialize::default(),
                rs: Deserialize::default(),
                ru: Deserialize::default(),
                sa: Deserialize::default(),
                se: Deserialize::default(),
                sg: Deserialize::default(),
                si: Deserialize::default(),
                sk: Deserialize::default(),
                sn: Deserialize::default(),
                sr: Deserialize::default(),
                th: Deserialize::default(),
                tj: Deserialize::default(),
                tr: Deserialize::default(),
                tz: Deserialize::default(),
                ug: Deserialize::default(),
                us: Deserialize::default(),
                uy: Deserialize::default(),
                uz: Deserialize::default(),
                vn: Deserialize::default(),
                za: Deserialize::default(),
                zm: Deserialize::default(),
                zw: Deserialize::default(),
            }
        }

        fn take_out(&mut self) -> Option<Self::Out> {
            let (
                Some(ae),
                Some(al),
                Some(am),
                Some(ao),
                Some(at),
                Some(au),
                Some(aw),
                Some(az),
                Some(ba),
                Some(bb),
                Some(bd),
                Some(be),
                Some(bf),
                Some(bg),
                Some(bh),
                Some(bj),
                Some(bs),
                Some(by),
                Some(ca),
                Some(cd),
                Some(ch),
                Some(cl),
                Some(cm),
                Some(co),
                Some(cr),
                Some(cv),
                Some(cy),
                Some(cz),
                Some(de),
                Some(dk),
                Some(ec),
                Some(ee),
                Some(eg),
                Some(es),
                Some(et),
                Some(fi),
                Some(fr),
                Some(gb),
                Some(ge),
                Some(gn),
                Some(gr),
                Some(hr),
                Some(hu),
                Some(id),
                Some(ie),
                Some(in_),
                Some(is),
                Some(it),
                Some(jp),
                Some(ke),
                Some(kg),
                Some(kh),
                Some(kr),
                Some(kz),
                Some(la),
                Some(lt),
                Some(lu),
                Some(lv),
                Some(ma),
                Some(md),
                Some(me),
                Some(mk),
                Some(mr),
                Some(mt),
                Some(mx),
                Some(my),
                Some(ng),
                Some(nl),
                Some(no),
                Some(np),
                Some(nz),
                Some(om),
                Some(pe),
                Some(ph),
                Some(pl),
                Some(pt),
                Some(ro),
                Some(rs),
                Some(ru),
                Some(sa),
                Some(se),
                Some(sg),
                Some(si),
                Some(sk),
                Some(sn),
                Some(sr),
                Some(th),
                Some(tj),
                Some(tr),
                Some(tz),
                Some(ug),
                Some(us),
                Some(uy),
                Some(uz),
                Some(vn),
                Some(za),
                Some(zm),
                Some(zw),
            ) = (
                self.ae,
                self.al,
                self.am,
                self.ao,
                self.at,
                self.au,
                self.aw,
                self.az,
                self.ba,
                self.bb,
                self.bd,
                self.be,
                self.bf,
                self.bg,
                self.bh,
                self.bj,
                self.bs,
                self.by,
                self.ca.take(),
                self.cd,
                self.ch,
                self.cl,
                self.cm,
                self.co,
                self.cr,
                self.cv,
                self.cy,
                self.cz,
                self.de,
                self.dk,
                self.ec,
                self.ee,
                self.eg,
                self.es,
                self.et,
                self.fi,
                self.fr,
                self.gb,
                self.ge,
                self.gn,
                self.gr,
                self.hr,
                self.hu,
                self.id,
                self.ie,
                self.in_,
                self.is,
                self.it,
                self.jp,
                self.ke,
                self.kg,
                self.kh,
                self.kr,
                self.kz,
                self.la,
                self.lt,
                self.lu,
                self.lv,
                self.ma,
                self.md,
                self.me,
                self.mk,
                self.mr,
                self.mt,
                self.mx,
                self.my,
                self.ng,
                self.nl,
                self.no,
                self.np,
                self.nz,
                self.om,
                self.pe,
                self.ph,
                self.pl,
                self.pt,
                self.ro,
                self.rs,
                self.ru,
                self.sa,
                self.se,
                self.sg,
                self.si,
                self.sk,
                self.sn,
                self.sr,
                self.th,
                self.tj,
                self.tr,
                self.tz,
                self.ug,
                self.us.take(),
                self.uy,
                self.uz,
                self.vn,
                self.za,
                self.zm,
                self.zw,
            )
            else {
                return None;
            };
            Some(Self::Out {
                ae,
                al,
                am,
                ao,
                at,
                au,
                aw,
                az,
                ba,
                bb,
                bd,
                be,
                bf,
                bg,
                bh,
                bj,
                bs,
                by,
                ca,
                cd,
                ch,
                cl,
                cm,
                co,
                cr,
                cv,
                cy,
                cz,
                de,
                dk,
                ec,
                ee,
                eg,
                es,
                et,
                fi,
                fr,
                gb,
                ge,
                gn,
                gr,
                hr,
                hu,
                id,
                ie,
                in_,
                is,
                it,
                jp,
                ke,
                kg,
                kh,
                kr,
                kz,
                la,
                lt,
                lu,
                lv,
                ma,
                md,
                me,
                mk,
                mr,
                mt,
                mx,
                my,
                ng,
                nl,
                no,
                np,
                nz,
                om,
                pe,
                ph,
                pl,
                pt,
                ro,
                rs,
                ru,
                sa,
                se,
                sg,
                si,
                sk,
                sn,
                sr,
                th,
                tj,
                tr,
                tz,
                ug,
                us,
                uy,
                uz,
                vn,
                za,
                zm,
                zw,
            })
        }
    }

    impl Map for Builder<'_> {
        fn key(&mut self, k: &str) -> Result<&mut dyn Visitor> {
            self.builder.key(k)
        }

        fn finish(&mut self) -> Result<()> {
            *self.out = self.builder.take_out();
            Ok(())
        }
    }

    impl ObjectDeser for TaxProductRegistrationsResourceCountryOptions {
        type Builder = TaxProductRegistrationsResourceCountryOptionsBuilder;
    }

    impl FromValueOpt for TaxProductRegistrationsResourceCountryOptions {
        fn from_value(v: Value) -> Option<Self> {
            let Value::Object(obj) = v else {
                return None;
            };
            let mut b = TaxProductRegistrationsResourceCountryOptionsBuilder::deser_default();
            for (k, v) in obj {
                match k.as_str() {
                    "ae" => b.ae = FromValueOpt::from_value(v),
                    "al" => b.al = FromValueOpt::from_value(v),
                    "am" => b.am = FromValueOpt::from_value(v),
                    "ao" => b.ao = FromValueOpt::from_value(v),
                    "at" => b.at = FromValueOpt::from_value(v),
                    "au" => b.au = FromValueOpt::from_value(v),
                    "aw" => b.aw = FromValueOpt::from_value(v),
                    "az" => b.az = FromValueOpt::from_value(v),
                    "ba" => b.ba = FromValueOpt::from_value(v),
                    "bb" => b.bb = FromValueOpt::from_value(v),
                    "bd" => b.bd = FromValueOpt::from_value(v),
                    "be" => b.be = FromValueOpt::from_value(v),
                    "bf" => b.bf = FromValueOpt::from_value(v),
                    "bg" => b.bg = FromValueOpt::from_value(v),
                    "bh" => b.bh = FromValueOpt::from_value(v),
                    "bj" => b.bj = FromValueOpt::from_value(v),
                    "bs" => b.bs = FromValueOpt::from_value(v),
                    "by" => b.by = FromValueOpt::from_value(v),
                    "ca" => b.ca = FromValueOpt::from_value(v),
                    "cd" => b.cd = FromValueOpt::from_value(v),
                    "ch" => b.ch = FromValueOpt::from_value(v),
                    "cl" => b.cl = FromValueOpt::from_value(v),
                    "cm" => b.cm = FromValueOpt::from_value(v),
                    "co" => b.co = FromValueOpt::from_value(v),
                    "cr" => b.cr = FromValueOpt::from_value(v),
                    "cv" => b.cv = FromValueOpt::from_value(v),
                    "cy" => b.cy = FromValueOpt::from_value(v),
                    "cz" => b.cz = FromValueOpt::from_value(v),
                    "de" => b.de = FromValueOpt::from_value(v),
                    "dk" => b.dk = FromValueOpt::from_value(v),
                    "ec" => b.ec = FromValueOpt::from_value(v),
                    "ee" => b.ee = FromValueOpt::from_value(v),
                    "eg" => b.eg = FromValueOpt::from_value(v),
                    "es" => b.es = FromValueOpt::from_value(v),
                    "et" => b.et = FromValueOpt::from_value(v),
                    "fi" => b.fi = FromValueOpt::from_value(v),
                    "fr" => b.fr = FromValueOpt::from_value(v),
                    "gb" => b.gb = FromValueOpt::from_value(v),
                    "ge" => b.ge = FromValueOpt::from_value(v),
                    "gn" => b.gn = FromValueOpt::from_value(v),
                    "gr" => b.gr = FromValueOpt::from_value(v),
                    "hr" => b.hr = FromValueOpt::from_value(v),
                    "hu" => b.hu = FromValueOpt::from_value(v),
                    "id" => b.id = FromValueOpt::from_value(v),
                    "ie" => b.ie = FromValueOpt::from_value(v),
                    "in" => b.in_ = FromValueOpt::from_value(v),
                    "is" => b.is = FromValueOpt::from_value(v),
                    "it" => b.it = FromValueOpt::from_value(v),
                    "jp" => b.jp = FromValueOpt::from_value(v),
                    "ke" => b.ke = FromValueOpt::from_value(v),
                    "kg" => b.kg = FromValueOpt::from_value(v),
                    "kh" => b.kh = FromValueOpt::from_value(v),
                    "kr" => b.kr = FromValueOpt::from_value(v),
                    "kz" => b.kz = FromValueOpt::from_value(v),
                    "la" => b.la = FromValueOpt::from_value(v),
                    "lt" => b.lt = FromValueOpt::from_value(v),
                    "lu" => b.lu = FromValueOpt::from_value(v),
                    "lv" => b.lv = FromValueOpt::from_value(v),
                    "ma" => b.ma = FromValueOpt::from_value(v),
                    "md" => b.md = FromValueOpt::from_value(v),
                    "me" => b.me = FromValueOpt::from_value(v),
                    "mk" => b.mk = FromValueOpt::from_value(v),
                    "mr" => b.mr = FromValueOpt::from_value(v),
                    "mt" => b.mt = FromValueOpt::from_value(v),
                    "mx" => b.mx = FromValueOpt::from_value(v),
                    "my" => b.my = FromValueOpt::from_value(v),
                    "ng" => b.ng = FromValueOpt::from_value(v),
                    "nl" => b.nl = FromValueOpt::from_value(v),
                    "no" => b.no = FromValueOpt::from_value(v),
                    "np" => b.np = FromValueOpt::from_value(v),
                    "nz" => b.nz = FromValueOpt::from_value(v),
                    "om" => b.om = FromValueOpt::from_value(v),
                    "pe" => b.pe = FromValueOpt::from_value(v),
                    "ph" => b.ph = FromValueOpt::from_value(v),
                    "pl" => b.pl = FromValueOpt::from_value(v),
                    "pt" => b.pt = FromValueOpt::from_value(v),
                    "ro" => b.ro = FromValueOpt::from_value(v),
                    "rs" => b.rs = FromValueOpt::from_value(v),
                    "ru" => b.ru = FromValueOpt::from_value(v),
                    "sa" => b.sa = FromValueOpt::from_value(v),
                    "se" => b.se = FromValueOpt::from_value(v),
                    "sg" => b.sg = FromValueOpt::from_value(v),
                    "si" => b.si = FromValueOpt::from_value(v),
                    "sk" => b.sk = FromValueOpt::from_value(v),
                    "sn" => b.sn = FromValueOpt::from_value(v),
                    "sr" => b.sr = FromValueOpt::from_value(v),
                    "th" => b.th = FromValueOpt::from_value(v),
                    "tj" => b.tj = FromValueOpt::from_value(v),
                    "tr" => b.tr = FromValueOpt::from_value(v),
                    "tz" => b.tz = FromValueOpt::from_value(v),
                    "ug" => b.ug = FromValueOpt::from_value(v),
                    "us" => b.us = FromValueOpt::from_value(v),
                    "uy" => b.uy = FromValueOpt::from_value(v),
                    "uz" => b.uz = FromValueOpt::from_value(v),
                    "vn" => b.vn = FromValueOpt::from_value(v),
                    "za" => b.za = FromValueOpt::from_value(v),
                    "zm" => b.zm = FromValueOpt::from_value(v),
                    "zw" => b.zw = FromValueOpt::from_value(v),

                    _ => {}
                }
            }
            b.take_out()
        }
    }
};
